{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nA full-stack document management system built for Zeolf organization that enables secure document storage, sharing, and collaboration. The application provides role-based access control, activity tracking, and supports multiple document formats including PDFs, Word documents, Excel sheets, and PowerPoint presentations. The system is designed with a modern tech stack featuring React frontend, Express.js backend, PostgreSQL database, and comprehensive UI components for an intuitive user experience.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **File Upload**: Uppy.js for advanced file upload capabilities with drag-and-drop support\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Authentication**: Passport.js with local strategy using login codes instead of passwords\n- **Session Management**: Express sessions with PostgreSQL session store for persistence\n- **File Upload**: Multer middleware for handling multipart/form-data uploads\n- **Security**: Bcrypt-equivalent password hashing using Node.js crypto module\n\n## Database Design\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database queries and migrations\n- **Schema Structure**:\n  - Users table with role-based access (super_admin/user)\n  - Documents table with metadata and file information\n  - Document shares for granular sharing permissions\n  - Activity logs for comprehensive audit trails\n- **Connection**: Neon serverless pool with WebSocket support\n\n## File Storage Strategy\n- **Local Storage**: Multer disk storage for uploaded files in `/uploads` directory\n- **File Processing**: Support for multiple MIME types with size limits (50MB)\n- **Metadata Tracking**: Original filename preservation with unique generated filenames\n\n## Authentication & Authorization\n- **Login Method**: Unique login codes instead of traditional email/password\n- **Session Security**: HTTP-only cookies with CSRF protection\n- **Role System**: Two-tier access control (super_admin and user roles)\n- **Protected Routes**: Client-side route protection with authentication checks\n\n## API Architecture\n- **RESTful Design**: Standard HTTP methods for CRUD operations\n- **Error Handling**: Centralized error middleware with proper status codes\n- **Request Logging**: Comprehensive logging for API endpoints with performance metrics\n- **File Serving**: Direct file downloads through protected endpoints\n\n## Development & Build System\n- **Bundler**: Vite for fast development and optimized production builds\n- **Development**: Hot module replacement with error overlay for debugging\n- **Production**: ESBuild for server bundling with external package optimization\n- **Environment**: Separate development and production configurations\n\n## UI/UX Design Philosophy\n- **Component System**: Modular, reusable components following atomic design principles\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Accessibility**: Radix UI primitives ensure WCAG compliance\n- **Theme System**: CSS custom properties for consistent design tokens\n- **Loading States**: Skeleton components and proper loading indicators\n\n## Category Management\nDocuments are organized into five primary categories:\n- Press Releases\n- Memos  \n- Internal Letters\n- Contracts\n- Follow-ups\n\nEach category has distinct visual indicators and filtering capabilities.\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL serverless database connection\n- **drizzle-orm**: Type-safe ORM for database operations\n- **express**: Web application framework for Node.js\n- **passport**: Authentication middleware with local strategy\n- **multer**: File upload handling middleware\n\n## Frontend UI Dependencies\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library for React\n- **tailwindcss**: Utility-first CSS framework\n- **react-hook-form**: Performant form library with validation\n\n## File Upload & Processing\n- **@uppy/core**: Modular file uploader core\n- **@uppy/dashboard**: File upload UI component\n- **@uppy/aws-s3**: Cloud storage integration (configured but not actively used)\n\n## Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Replit integration for development\n\n## Database & Sessions\n- **connect-pg-simple**: PostgreSQL session store for Express\n- **ws**: WebSocket implementation for Neon database connections\n\n## Security & Validation\n- **zod**: TypeScript-first schema validation\n- **drizzle-zod**: Integration between Drizzle ORM and Zod validation\n\n## Date & Utility Libraries\n- **date-fns**: Modern date utility library\n- **nanoid**: URL-safe unique string ID generator\n- **class-variance-authority**: Utility for conditional CSS classes","size_bytes":5556},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // ZEOLF Brand Colors\n        'zeolf-blue': 'var(--zeolf-blue)',\n        'zeolf-blue-dark': 'var(--zeolf-blue-dark)',\n        'zeolf-accent': 'var(--zeolf-accent)',\n        'zeolf-success': 'var(--zeolf-success)',\n        'zeolf-warning': 'var(--zeolf-warning)',\n        'zeolf-error': 'var(--zeolf-error)',\n        'zeolf-bg': 'var(--zeolf-bg)',\n        'zeolf-surface': 'var(--zeolf-surface)',\n        'zeolf-text': 'var(--zeolf-text)',\n        'zeolf-text-secondary': 'var(--zeolf-text-secondary)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        segoe: ['Segoe UI', 'system-ui', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3332},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\nconst PostgresSessionStore = connectPg(session);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  if (!stored || !supplied) return false;\n  const parts = stored.split(\".\");\n  if (parts.length !== 2) return false;\n  \n  const [hashed, salt] = parts;\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"zeolf-document-management-secret-key-2024\",\n    resave: false,\n    saveUninitialized: false,\n    store: new PostgresSessionStore({\n      pool,\n      createTableIfMissing: true,\n    }),\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Custom strategy for login code authentication\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: 'loginCode',\n        passwordField: 'loginCode', // We only use login code, no password\n      },\n      async (loginCode, password, done) => {\n        try {\n          const user = await storage.getUserByLoginCode(loginCode);\n          if (!user || !user.isActive) {\n            return done(null, false, { message: 'Invalid or inactive login code' });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user || false);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration route (super admin can create new users)\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n\n      if (req.user?.role !== \"super_admin\") {\n        return res.status(403).json({ message: \"Super admin access required\" });\n      }\n\n      const { name, role } = req.body;\n      \n      // Generate unique login code\n      const loginCode = await storage.generateLoginCode();\n      \n      const user = await storage.createUser({\n        name,\n        loginCode,\n        role: role || \"user\",\n      });\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user.id,\n        action: \"create_user\",\n        resourceType: \"user\",\n        resourceId: user.id,\n        details: { newUserName: name, newUserRole: role },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.status(201).json({ ...user, loginCode: user.loginCode });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid login code\" });\n      }\n      \n      req.logIn(user, async (err) => {\n        if (err) {\n          return next(err);\n        }\n        \n        // Update last active timestamp\n        await storage.updateUserLastActive(user.id);\n        \n        // Log activity\n        await storage.createActivityLog({\n          userId: user.id,\n          action: \"login\",\n          resourceType: \"system\",\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent'),\n        });\n        \n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res, next) => {\n    const userId = req.user?.id;\n    \n    req.logout(async (err) => {\n      if (err) return next(err);\n      \n      // Log activity\n      if (userId) {\n        await storage.createActivityLog({\n          userId,\n          action: \"logout\",\n          resourceType: \"system\",\n          ipAddress: req.ip,\n          userAgent: req.get('User-Agent'),\n        });\n      }\n      \n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n    res.json(req.user);\n  });\n}\n","size_bytes":5301},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/grokService.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  baseURL: \"https://api.x.ai/v1\", \n  apiKey: process.env.XAI_API_KEY \n});\n\nexport interface TemplateRequest {\n  documentType: string;\n  title: string;\n  fileType: string;\n  recipientInfo?: {\n    name?: string;\n    address?: string;\n    title?: string;\n  };\n  isInternal?: boolean;\n}\n\nexport interface ResearchRequest {\n  topic: string;\n  documentType: string;\n  context?: string;\n}\n\nexport class GrokService {\n  async generateDocumentTemplate(request: TemplateRequest): Promise<string> {\n    try {\n      const prompt = this.buildTemplatePrompt(request);\n      \n      const response = await openai.chat.completions.create({\n        model: \"grok-2-1212\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are an expert document creation assistant for ZEOLF technology company. Generate professional business documents with proper formatting, headers, and structure.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 2000,\n        temperature: 0.7,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error generating template:\", error);\n      throw new Error(\"Failed to generate document template\");\n    }\n  }\n\n  async performResearch(request: ResearchRequest): Promise<string> {\n    try {\n      const prompt = `Research the topic \"${request.topic}\" for a ${request.documentType} document. \n                     ${request.context ? `Additional context: ${request.context}` : ''}\n                     \n                     Provide comprehensive, factual information that would be useful for creating this document. \n                     Include key points, statistics if relevant, and industry best practices.`;\n\n      const response = await openai.chat.completions.create({\n        model: \"grok-2-1212\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a research assistant specializing in business documentation. Provide accurate, well-structured research information.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 1500,\n        temperature: 0.5,\n      });\n\n      return response.choices[0].message.content || \"\";\n    } catch (error) {\n      console.error(\"Error performing research:\", error);\n      throw new Error(\"Failed to perform research\");\n    }\n  }\n\n  async improveDocumentContent(content: string, documentType: string): Promise<string> {\n    try {\n      const prompt = `Review and improve the following ${documentType} document content. \n                     Enhance clarity, professionalism, and structure while maintaining the original intent:\n                     \n                     ${content}`;\n\n      const response = await openai.chat.completions.create({\n        model: \"grok-2-1212\",\n        messages: [\n          {\n            role: \"system\",\n            content: \"You are a professional document editor. Improve document quality while preserving the original message and intent.\"\n          },\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: 2000,\n        temperature: 0.3,\n      });\n\n      return response.choices[0].message.content || content;\n    } catch (error) {\n      console.error(\"Error improving content:\", error);\n      throw new Error(\"Failed to improve document content\");\n    }\n  }\n\n  private buildTemplatePrompt(request: TemplateRequest): string {\n    const { documentType, title, fileType, recipientInfo, isInternal } = request;\n    \n    let prompt = `Create a professional ${documentType} template with the following specifications:\n    \n    - Document Title: ${title}\n    - File Type: ${fileType}\n    - Company: ZEOLF Technology\n    - Internal Document: ${isInternal ? 'Yes' : 'No'}\n    `;\n\n    if (recipientInfo) {\n      prompt += `\n    - Recipient Name: ${recipientInfo.name || 'Not specified'}\n    - Recipient Address: ${recipientInfo.address || 'Not specified'}\n    - Recipient Title: ${recipientInfo.title || 'Not specified'}\n      `;\n    }\n\n    prompt += `\n    \n    Please include:\n    1. Proper company header with ZEOLF Technology branding\n    2. Appropriate document structure for ${documentType}\n    3. Professional formatting suitable for ${fileType}\n    4. Placeholder content that can be easily customized\n    5. Standard business letter elements if applicable\n    \n    Format the response as clean, professional content that can be directly used in the document.`;\n\n    return prompt;\n  }\n\n  // Alias methods for backward compatibility\n  async generateTemplate(request: TemplateRequest): Promise<string> {\n    return this.generateDocumentTemplate(request);\n  }\n\n  async improveContent(content: string, documentType: string = \"document\"): Promise<string> {\n    return this.improveDocumentContent(content, documentType);\n  }\n}\n\nexport const grokService = new GrokService();","size_bytes":5027},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { insertFolderSchema, insertDocumentSchema, insertDocumentShareSchema, insertActivityLogSchema } from \"@shared/schema\";\nimport { grokService } from \"./grokService\";\nimport { z } from \"zod\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\n\n// Ensure upload directory exists\n(async () => {\n  try {\n    await fs.access(uploadDir);\n  } catch {\n    await fs.mkdir(uploadDir, { recursive: true });\n  }\n})();\n\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    const ext = path.extname(file.originalname);\n    cb(null, uniqueSuffix + ext);\n  }\n});\n\nconst upload = multer({\n  storage: storage_multer,\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedMimes = [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-powerpoint',\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    ];\n    \n    if (allowedMimes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, Word, Excel, and PowerPoint files are allowed.'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication\n  setupAuth(app);\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Middleware to check super admin role\n  const requireSuperAdmin = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"super_admin\") {\n      return res.status(403).json({ message: \"Super admin access required\" });\n    }\n    next();\n  };\n\n  // Helper functions for document generation\n  function getFileExtension(fileType: string): string {\n    switch (fileType) {\n      case 'word': return '.docx';\n      case 'excel': return '.xlsx';\n      case 'powerpoint': return '.pptx';\n      case 'pdf': return '.pdf';\n      default: return '.txt';\n    }\n  }\n\n  function getContentType(fileType: string): string {\n    switch (fileType) {\n      case 'word': return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n      case 'excel': return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n      case 'powerpoint': return 'application/vnd.openxmlformats-officedocument.presentationml.presentation';\n      case 'pdf': return 'application/pdf';\n      default: return 'text/plain';\n    }\n  }\n\n  async function generateDocumentContent(document: any): Promise<string> {\n    // Generate basic text content for the document\n    const header = `ZEOLF TECHNOLOGY\nDocument Management System\n\n${document.name}\nDocument Code: ${document.documentCode || 'N/A'}\nCategory: ${document.category.replace('_', ' ').toUpperCase()}\nCreated: ${document.createdAt.toLocaleDateString()}\n\n`;\n\n    let content = '';\n    if (document.content) {\n      if (document.content.title) {\n        content += `Title: ${document.content.title}\\n\\n`;\n      }\n      if (document.content.body) {\n        content += `${document.content.body}\\n\\n`;\n      }\n      if (document.content.cells) {\n        content += 'Excel Data:\\n';\n        Object.entries(document.content.cells).forEach(([cell, value]) => {\n          content += `${cell}: ${value}\\n`;\n        });\n        content += '\\n';\n      }\n      if (document.content.slides) {\n        content += 'PowerPoint Slides:\\n';\n        document.content.slides.forEach((slide: any, index: number) => {\n          content += `Slide ${index + 1}: ${slide.title}\\n${slide.content}\\n\\n`;\n        });\n      }\n    }\n\n    const footer = `\n---\nZEOLF Technology - ${document.category.replace('_', ' ').toUpperCase()}\nDocument Code: ${document.documentCode}\nGenerated: ${new Date().toLocaleDateString()}\n`;\n\n    return header + content + footer;\n  }\n\n  // Document routes\n  app.post(\"/api/documents/upload\", requireAuth, upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const { category, name: customName, folderId, description } = req.body;\n      \n      // Determine file type\n      const getFileType = (mimetype: string) => {\n        if (mimetype.includes('pdf')) return 'pdf';\n        if (mimetype.includes('word')) return 'word';\n        if (mimetype.includes('excel') || mimetype.includes('spreadsheet')) return 'excel';\n        if (mimetype.includes('powerpoint') || mimetype.includes('presentation')) return 'powerpoint';\n        return 'unknown';\n      };\n\n      const fileType = getFileType(req.file.mimetype);\n      const documentName = customName || req.file.originalname;\n\n      const document = await storage.createDocument({\n        name: documentName,\n        originalName: req.file.originalname,\n        category: category || 'memos',\n        fileType,\n        fileSize: req.file.size,\n        filePath: req.file.path,\n        uploadedBy: req.user!.id,\n        folderId: folderId || null,\n        description: description || null,\n        metadata: {\n          mimetype: req.file.mimetype,\n          uploadedAt: new Date().toISOString(),\n        }\n      });\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"upload\",\n        resourceType: \"document\",\n        resourceId: document.id,\n        details: {\n          documentName: document.name,\n          fileSize: document.fileSize,\n          category: document.category,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.status(201).json(document);\n    } catch (error: any) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: error.message || \"Upload failed\" });\n    }\n  });\n\n  // Get all documents\n  app.get(\"/api/documents\", requireAuth, async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      let documents;\n      \n      if (search) {\n        documents = await storage.searchDocuments(search as string);\n      } else if (category) {\n        documents = await storage.getDocumentsByCategory(category as string);\n      } else {\n        documents = await storage.getAllDocuments();\n      }\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"view\",\n        resourceType: \"document\",\n        details: { category, search },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.json(documents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get single document\n  app.get(\"/api/documents/:id\", requireAuth, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"view\",\n        resourceType: \"document\",\n        resourceId: document.id,\n        details: { documentName: document.name },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.json(document);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Download document\n  app.get(\"/api/documents/:id/download\", requireAuth, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      // Check if file exists (for uploaded documents)\n      const fileExists = await fs.access(document.filePath).then(() => true).catch(() => false);\n      \n      if (!fileExists) {\n        // For template-created documents, generate content dynamically\n        if (document.filePath.startsWith('templates/')) {\n          const content = await generateDocumentContent(document);\n          \n          // Set appropriate content type and filename\n          const extension = getFileExtension(document.fileType);\n          const filename = `${document.name}${extension}`;\n          \n          res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n          res.setHeader('Content-Type', getContentType(document.fileType));\n          \n          // Log activity\n          await storage.createActivityLog({\n            userId: req.user!.id,\n            action: \"download\",\n            resourceType: \"document\",\n            resourceId: document.id,\n            details: { \n              documentName: document.name,\n              fileSize: content.length,\n              generatedFromTemplate: true,\n            },\n            ipAddress: req.ip,\n            userAgent: req.get('User-Agent'),\n          });\n          \n          return res.send(content);\n        } else {\n          return res.status(404).json({ message: \"File not found on disk\" });\n        }\n      }\n      \n      // Log activity for regular file downloads\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"download\",\n        resourceType: \"document\",\n        resourceId: document.id,\n        details: { \n          documentName: document.name,\n          fileSize: document.fileSize,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.download(document.filePath, document.originalName);\n    } catch (error: any) {\n      console.error('Download error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update document (same file ID)\n  app.put(\"/api/documents/:id/update\", requireAuth, upload.single('file'), async (req, res) => {\n    try {\n      console.log('Document update request received for ID:', req.params.id);\n      const documentId = req.params.id;\n      const existingDocument = await storage.getDocument(documentId);\n      \n      if (!existingDocument) {\n        console.log('Document not found:', documentId);\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n\n      if (!req.file) {\n        console.log('No file uploaded in request');\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      console.log('Updating document with file:', req.file.originalname, 'Size:', req.file.size);\n\n      const { category, description } = req.body;\n      \n      // Delete old file\n      try {\n        await fs.unlink(existingDocument.filePath);\n      } catch (error) {\n        console.warn('Could not delete old file:', error);\n      }\n\n      // Update document with new file, keeping the same name and document properties\n      const updatedDocument = await storage.updateDocument(documentId, {\n        // Keep the original document name and properties, only update file-related fields\n        originalName: req.file.originalname,\n        filePath: req.file.path,\n        fileSize: req.file.size,\n        fileType: path.extname(req.file.originalname).toLowerCase().substring(1),\n        updatedAt: new Date(),\n        // Reset content since this is a file replacement\n        content: null,\n      });\n\n      if (!updatedDocument) {\n        return res.status(500).json({ message: \"Failed to update document\" });\n      }\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"update\",\n        resourceType: \"document\",\n        resourceId: documentId,\n        details: {\n          documentName: updatedDocument.name,\n          fileSize: req.file.size,\n          fileType: updatedDocument.fileType,\n          category: updatedDocument.category,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.json(updatedDocument);\n    } catch (error: any) {\n      console.error('Document update error:', error);\n      res.status(500).json({ message: error.message || \"Update failed\" });\n    }\n  });\n\n  // Download document as PDF\n  app.get(\"/api/documents/:id/download/pdf\", requireAuth, async (req, res) => {\n    try {\n      const document = await storage.getDocument(req.params.id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      // Generate PDF content for any document type\n      const pdfBuffer = await storage.generatePDF(document);\n      const filename = `${document.name}.pdf`;\n      \n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.setHeader('Content-Type', 'application/pdf');\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"download_pdf\",\n        resourceType: \"document\",\n        resourceId: document.id,\n        details: { \n          documentName: document.name,\n          generatedPdf: true,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.send(pdfBuffer);\n    } catch (error: any) {\n      console.error('PDF download error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Share document\n  app.post(\"/api/documents/:id/share\", requireAuth, async (req, res) => {\n    try {\n      const { sharedWith, permission } = req.body;\n      const documentId = req.params.id;\n      \n      const document = await storage.getDocument(documentId);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      const share = await storage.shareDocument({\n        documentId,\n        sharedBy: req.user!.id,\n        sharedWith,\n        permission: permission || 'view',\n      });\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"share\",\n        resourceType: \"document\",\n        resourceId: documentId,\n        details: {\n          documentName: document.name,\n          sharedWith,\n          permission,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.status(201).json(share);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get shared documents\n  app.get(\"/api/documents/shared/with-me\", requireAuth, async (req, res) => {\n    try {\n      const documents = await storage.getUserSharedDocuments(req.user!.id);\n      res.json(documents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get document statistics\n  app.get(\"/api/documents/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getDocumentStats();\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // User management routes (Super Admin only)\n  app.get(\"/api/admin/users\", requireSuperAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", requireSuperAdmin, async (req, res) => {\n    try {\n      const { isActive, name, role } = req.body;\n      const user = await storage.updateUser(req.params.id, {\n        isActive,\n        name,\n        role,\n      });\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"update_user\",\n        resourceType: \"user\",\n        resourceId: user.id,\n        details: { changes: { isActive, name, role } },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Activity logs (Super Admin only)\n  app.get(\"/api/admin/activity-logs\", requireSuperAdmin, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getActivityLogs(limit);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get user activity logs\n  app.get(\"/api/activity-logs\", requireAuth, async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const logs = await storage.getUserActivityLogs(req.user!.id, limit);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Folder routes\n  app.post(\"/api/folders\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertFolderSchema.parse(req.body);\n      \n      const folder = await storage.createFolder({\n        ...validatedData,\n        createdBy: req.user!.id,\n      });\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"create\",\n        resourceType: \"folder\",\n        resourceId: folder.id,\n        details: {\n          folderName: folder.name,\n          hasSecurityCode: folder.hasSecurityCode,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.status(201).json(folder);\n    } catch (error: any) {\n      console.error('Create folder error:', error);\n      res.status(500).json({ message: error.message || \"Failed to create folder\" });\n    }\n  });\n\n  app.get(\"/api/folders\", requireAuth, async (req, res) => {\n    try {\n      const folders = await storage.getAllFolders();\n      res.json(folders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get individual folder details\n  app.get(\"/api/folders/:id\", requireAuth, async (req, res) => {\n    try {\n      const folder = await storage.getFolder(req.params.id);\n      if (!folder) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n      res.json(folder);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/folders/:id/documents\", requireAuth, async (req, res) => {\n    try {\n      const documents = await storage.getFolderDocuments(req.params.id);\n      res.json(documents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/folders/:id/verify-access\", requireAuth, async (req, res) => {\n    try {\n      const { securityCode } = req.body;\n      const folderId = req.params.id;\n      \n      const folder = await storage.getFolder(folderId);\n      if (!folder) {\n        return res.status(404).json({ message: \"Folder not found\" });\n      }\n\n      if (!folder.hasSecurityCode) {\n        return res.json({ success: true });\n      }\n\n      if (folder.securityCode !== securityCode) {\n        return res.status(401).json({ message: \"Invalid security code\" });\n      }\n\n      // Log access\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"access\",\n        resourceType: \"folder\",\n        resourceId: folderId,\n        details: { folderName: folder.name },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/ai/generate-template\", requireAuth, async (req, res) => {\n    try {\n      const template = await grokService.generateTemplate(req.body);\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"ai_generate_template\",\n        resourceType: \"ai\",\n        details: {\n          documentType: req.body.documentType,\n          title: req.body.title,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.json({ template });\n    } catch (error: any) {\n      console.error('AI template generation error:', error);\n      res.status(500).json({ message: error.message || \"Failed to generate template\" });\n    }\n  });\n\n  app.post(\"/api/ai/research\", requireAuth, async (req, res) => {\n    try {\n      const research = await grokService.performResearch(req.body);\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"ai_research\",\n        resourceType: \"ai\",\n        details: {\n          topic: req.body.topic,\n          documentType: req.body.documentType,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.json({ research });\n    } catch (error: any) {\n      console.error('AI research error:', error);\n      res.status(500).json({ message: error.message || \"Failed to perform research\" });\n    }\n  });\n\n  app.post(\"/api/ai/improve-content\", requireAuth, async (req, res) => {\n    try {\n      const improvedContent = await grokService.improveContent(req.body.content, req.body.documentType);\n\n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"ai_improve_content\",\n        resourceType: \"ai\",\n        details: {\n          documentType: req.body.documentType,\n          contentLength: req.body.content?.length || 0,\n        },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n\n      res.json({ improvedContent });\n    } catch (error: any) {\n      console.error('AI content improvement error:', error);\n      res.status(500).json({ message: error.message || \"Failed to improve content\" });\n    }\n  });\n\n  // Create document from template\n  app.post(\"/api/documents/create\", requireAuth, async (req, res) => {\n    try {\n      const { documentType, title, fileType, recipientName, recipientAddress, recipientTitle, isInternal, folderId } = req.body;\n      \n      // Generate document code\n      const year = new Date().getFullYear();\n      const typeCode = documentType.toUpperCase().replace('_', '-');\n      const count = await storage.getDocumentCount(documentType) + 1;\n      const documentCode = `${typeCode}-${year}-${count.toString().padStart(3, '0')}`;\n      \n      // Create initial content based on file type\n      let initialContent = {};\n      switch (fileType) {\n        case 'word':\n          initialContent = {\n            title: title,\n            body: `This ${documentType.replace('_', ' ')} document was created on ${new Date().toLocaleDateString()}.`\n          };\n          break;\n        case 'excel':\n          initialContent = {\n            cells: {\n              'cell_0': 'Document Title',\n              'cell_1': title,\n              'cell_4': 'Created Date',\n              'cell_5': new Date().toLocaleDateString(),\n              'cell_8': 'Document Code',\n              'cell_9': documentCode\n            }\n          };\n          break;\n        case 'powerpoint':\n          initialContent = {\n            slides: [\n              {\n                title: title,\n                content: `${documentType.replace('_', ' ').toUpperCase()}\\n\\nCreated: ${new Date().toLocaleDateString()}\\nCode: ${documentCode}`\n              }\n            ]\n          };\n          break;\n      }\n      \n      // Prepare recipient info if it's a letter\n      let recipientInfo = null;\n      if ((documentType === 'internal_letter' || documentType === 'external_letter') && recipientName) {\n        recipientInfo = {\n          name: recipientName,\n          address: recipientAddress,\n          title: recipientTitle,\n          isInternal: isInternal\n        };\n      }\n      \n      const document = await storage.createDocument({\n        name: title,\n        originalName: title,\n        category: documentType,\n        fileType: fileType,\n        fileSize: 0, // Template documents start with 0 size\n        filePath: `templates/${documentCode}`, // Virtual path for templates\n        uploadedBy: req.user!.id,\n        folderId: folderId || null,\n        documentCode: documentCode,\n        isTemplate: false,\n        content: initialContent,\n        recipientInfo: recipientInfo,\n        metadata: {\n          createdViaTemplate: true,\n          documentType: documentType\n        }\n      });\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"create_document\",\n        resourceType: \"document\",\n        resourceId: document.id,\n        details: { documentType, fileType, documentCode },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.status(201).json(document);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Update document content\n  app.put(\"/api/documents/:id/content\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { content } = req.body;\n      \n      const document = await storage.updateDocumentContent(id, content);\n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"edit_document\",\n        resourceType: \"document\",\n        resourceId: id,\n        details: { contentUpdated: true },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.json(document);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Export document to PDF\n  app.post(\"/api/documents/:id/export-pdf\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const document = await storage.getDocument(id);\n      \n      if (!document) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      // Generate PDF content based on document type and content\n      const pdfContent = await storage.generatePDF(document);\n      \n      // Log activity\n      await storage.createActivityLog({\n        userId: req.user!.id,\n        action: \"export_pdf\",\n        resourceType: \"document\",\n        resourceId: id,\n        details: { exportFormat: 'pdf' },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent'),\n      });\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${document.name}.pdf\"`);\n      res.send(pdfContent);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27376},"server/storage.ts":{"content":"import { users, folders, documents, documentShares, activityLogs, type User, type InsertUser, type Folder, type InsertFolder, type Document, type InsertDocument, type DocumentShare, type InsertDocumentShare, type ActivityLog, type InsertActivityLog } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, count, like, sql, gt, lt } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByLoginCode(loginCode: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLastActive(id: string): Promise<void>;\n  generateLoginCode(): Promise<string>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Folder operations\n  createFolder(folder: InsertFolder): Promise<Folder>;\n  getFolder(id: string): Promise<Folder | undefined>;\n  getFolderByName(name: string): Promise<Folder | undefined>;\n  getUserFolders(userId: string): Promise<Folder[]>;\n  getAllFolders(): Promise<Folder[]>;\n  updateFolder(id: string, updates: Partial<Folder>): Promise<Folder | undefined>;\n  deleteFolder(id: string): Promise<boolean>;\n  verifyFolderAccess(folderId: string, securityCode?: string): Promise<boolean>;\n  \n  // Document operations\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocument(id: string): Promise<Document | undefined>;\n  getUserDocuments(userId: string): Promise<Document[]>;\n  getFolderDocuments(folderId: string): Promise<Document[]>;\n  getAllDocuments(): Promise<Document[]>;\n  getDocumentsByCategory(category: string): Promise<Document[]>;\n  searchDocuments(query: string): Promise<Document[]>;\n  updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined>;\n  deleteDocument(id: string): Promise<boolean>;\n  getDocumentCount(documentType: string): Promise<number>;\n  getDocumentCountByTypeAndYear(documentType: string, year: number): Promise<number>;\n  updateDocumentContent(id: string, content: any): Promise<Document | undefined>;\n  generatePDF(document: Document): Promise<Buffer>;\n  \n  // Document sharing\n  shareDocument(share: InsertDocumentShare): Promise<DocumentShare>;\n  getDocumentShares(documentId: string): Promise<DocumentShare[]>;\n  getUserSharedDocuments(userId: string): Promise<Document[]>;\n  removeDocumentShare(id: string): Promise<boolean>;\n  \n  // Activity logging\n  createActivityLog(log: InsertActivityLog & { userId: string }): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  getUserActivityLogs(userId: string, limit?: number): Promise<ActivityLog[]>;\n  \n  // Statistics\n  getDocumentStats(): Promise<{\n    pressReleases: number;\n    memos: number;\n    letters: number;\n    contracts: number;\n    followups: number;\n    total: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByLoginCode(loginCode: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.loginCode, loginCode));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserLastActive(id: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastActive: new Date() })\n      .where(eq(users.id, id));\n  }\n\n  // Folder operations implementation\n  async createFolder(insertFolder: InsertFolder & { createdBy: string }): Promise<Folder> {\n    const [folder] = await db\n      .insert(folders)\n      .values(insertFolder)\n      .returning();\n    return folder;\n  }\n\n  async getFolder(id: string): Promise<Folder | undefined> {\n    const [folder] = await db.select().from(folders).where(eq(folders.id, id));\n    return folder || undefined;\n  }\n\n  async getFolderByName(name: string): Promise<Folder | undefined> {\n    const [folder] = await db.select().from(folders).where(eq(folders.name, name));\n    return folder || undefined;\n  }\n\n  async getUserFolders(userId: string): Promise<Folder[]> {\n    return await db.select().from(folders).where(eq(folders.createdBy, userId)).orderBy(desc(folders.createdAt));\n  }\n\n  async getAllFolders(): Promise<Folder[]> {\n    return await db.select().from(folders).orderBy(desc(folders.createdAt));\n  }\n\n  async updateFolder(id: string, updates: Partial<Folder>): Promise<Folder | undefined> {\n    const [folder] = await db\n      .update(folders)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(folders.id, id))\n      .returning();\n    return folder || undefined;\n  }\n\n  async deleteFolder(id: string): Promise<boolean> {\n    const result = await db.delete(folders).where(eq(folders.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async verifyFolderAccess(folderId: string, securityCode?: string): Promise<boolean> {\n    const folder = await this.getFolder(folderId);\n    if (!folder) return false;\n    \n    if (!folder.hasSecurityCode) return true;\n    \n    return folder.securityCode === securityCode;\n  }\n\n  async getFolderDocuments(folderId: string): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.folderId, folderId)).orderBy(desc(documents.createdAt));\n  }\n\n  async generateLoginCode(): Promise<string> {\n    let attempts = 0;\n    const maxAttempts = 10;\n    \n    while (attempts < maxAttempts) {\n      const code = `ZT-${Math.random().toString(36).substr(2, 3).toUpperCase()}-${Math.random().toString(36).substr(2, 3).toUpperCase()}`;\n      const existing = await this.getUserByLoginCode(code);\n      \n      if (!existing) {\n        return code;\n      }\n      attempts++;\n    }\n    \n    // Fallback to UUID-based code\n    return `ZT-${randomUUID().substr(0, 8).toUpperCase()}`;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async createDocument(insertDocument: InsertDocument & { uploadedBy: string }): Promise<Document> {\n    const [document] = await db\n      .insert(documents)\n      .values(insertDocument)\n      .returning();\n    return document;\n  }\n\n  async getDocument(id: string): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async getUserDocuments(userId: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.uploadedBy, userId))\n      .orderBy(desc(documents.updatedAt));\n  }\n\n  async getAllDocuments(): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .orderBy(desc(documents.updatedAt));\n  }\n\n  async getDocumentsByCategory(category: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.category, category))\n      .orderBy(desc(documents.updatedAt));\n  }\n\n  async searchDocuments(query: string): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(\n        or(\n          like(documents.name, `%${query}%`),\n          like(documents.originalName, `%${query}%`)\n        )\n      )\n      .orderBy(desc(documents.updatedAt));\n  }\n\n  async updateDocument(id: string, updates: Partial<Document>): Promise<Document | undefined> {\n    const [document] = await db\n      .update(documents)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(documents.id, id))\n      .returning();\n    return document || undefined;\n  }\n\n  async deleteDocument(id: string): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async shareDocument(insertShare: InsertDocumentShare & { sharedBy: string }): Promise<DocumentShare> {\n    const [share] = await db\n      .insert(documentShares)\n      .values(insertShare)\n      .returning();\n    return share;\n  }\n\n  async getDocumentShares(documentId: string): Promise<DocumentShare[]> {\n    return await db\n      .select()\n      .from(documentShares)\n      .where(eq(documentShares.documentId, documentId));\n  }\n\n  async getUserSharedDocuments(userId: string): Promise<Document[]> {\n    const sharedDocs = await db\n      .select({ document: documents })\n      .from(documents)\n      .innerJoin(documentShares, eq(documents.id, documentShares.documentId))\n      .where(eq(documentShares.sharedWith, userId))\n      .orderBy(desc(documents.updatedAt));\n    \n    return sharedDocs.map(item => item.document);\n  }\n\n  async removeDocumentShare(id: string): Promise<boolean> {\n    const result = await db.delete(documentShares).where(eq(documentShares.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async createActivityLog(insertLog: InsertActivityLog & { userId: string }): Promise<ActivityLog> {\n    const [log] = await db\n      .insert(activityLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  async getActivityLogs(limit: number = 50): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  async getUserActivityLogs(userId: string, limit: number = 50): Promise<ActivityLog[]> {\n    return await db\n      .select()\n      .from(activityLogs)\n      .where(eq(activityLogs.userId, userId))\n      .orderBy(desc(activityLogs.createdAt))\n      .limit(limit);\n  }\n\n  async getDocumentStats() {\n    const [stats] = await db\n      .select({\n        pressReleases: count(eq(documents.category, 'press_releases')),\n        memos: count(eq(documents.category, 'memos')),\n        letters: count(eq(documents.category, 'internal_letters')),\n        contracts: count(eq(documents.category, 'contracts')),\n        followups: count(eq(documents.category, 'follow_ups')),\n        total: count(),\n      })\n      .from(documents);\n    \n    return {\n      pressReleases: Number(stats.pressReleases) || 0,\n      memos: Number(stats.memos) || 0,\n      letters: Number(stats.letters) || 0,\n      contracts: Number(stats.contracts) || 0,\n      followups: Number(stats.followups) || 0,\n      total: Number(stats.total) || 0,\n    };\n  }\n\n  async getDocumentCount(documentType: string): Promise<number> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(documents)\n      .where(eq(documents.category, documentType));\n    return Number(result.count) || 0;\n  }\n\n  async getDocumentCountByTypeAndYear(documentType: string, year: number): Promise<number> {\n    const yearStart = new Date(year, 0, 1);\n    const yearEnd = new Date(year + 1, 0, 1);\n    \n    const [result] = await db\n      .select({ count: count() })\n      .from(documents)\n      .where(\n        and(\n          eq(documents.category, documentType),\n          and(\n            sql`${documents.createdAt} >= ${yearStart}`,\n            sql`${documents.createdAt} < ${yearEnd}`\n          )\n        )\n      );\n    return Number(result.count) || 0;\n  }\n\n  async updateDocumentContent(id: string, content: any): Promise<Document | undefined> {\n    const [document] = await db\n      .update(documents)\n      .set({ \n        content,\n        updatedAt: new Date() \n      })\n      .where(eq(documents.id, id))\n      .returning();\n    return document || undefined;\n  }\n\n  async generatePDF(document: Document): Promise<Buffer> {\n    // Simple PDF generation - in a real application, you'd use a proper PDF library\n    const pdfContent = `\nZEOLF TECHNOLOGY\nDocument Management System\n\n${document.name}\nDocument Code: ${document.documentCode || 'N/A'}\nCategory: ${document.category.replace('_', ' ').toUpperCase()}\nCreated: ${document.createdAt.toLocaleDateString()}\n\nContent:\n${JSON.stringify(document.content, null, 2)}\n\n---\nZEOLF Technology - ${document.category.replace('_', ' ').toUpperCase()}\nDocument Code: ${document.documentCode}\nGenerated: ${new Date().toLocaleDateString()}\n    `;\n    \n    // Return as buffer for now - in production, use a proper PDF library like PDFKit or Puppeteer\n    return Buffer.from(pdfContent, 'utf-8');\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":12616},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  loginCode: text(\"login_code\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"user\"), // \"super_admin\" or \"user\"\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastActive: timestamp(\"last_active\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const folders = pgTable(\"folders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  securityCode: text(\"security_code\"), // Optional security code for folder access\n  hasSecurityCode: boolean(\"has_security_code\").default(false),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  description: text(\"description\"), // Optional description for uploaded files\n  category: text(\"category\").notNull(), // \"press_releases\", \"memos\", \"internal_letters\", \"contracts\", \"follow_ups\"\n  fileType: text(\"file_type\").notNull(), // \"pdf\", \"word\", \"excel\", \"powerpoint\"\n  fileSize: integer(\"file_size\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  folderId: varchar(\"folder_id\").references(() => folders.id), // Documents must belong to a folder\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  metadata: jsonb(\"metadata\"), // for additional document properties\n  // New fields for document creation\n  documentCode: text(\"document_code\"), // Auto-generated code (e.g., PR-2024-001, MEMO-2024-001)\n  isTemplate: boolean(\"is_template\").default(false),\n  content: jsonb(\"content\"), // Document content for online editing\n  recipientInfo: jsonb(\"recipient_info\"), // For letters: name, address, title\n});\n\nexport const documentShares = pgTable(\"document_shares\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  documentId: varchar(\"document_id\").references(() => documents.id).notNull(),\n  sharedBy: varchar(\"shared_by\").references(() => users.id).notNull(),\n  sharedWith: varchar(\"shared_with\").references(() => users.id).notNull(),\n  permission: text(\"permission\").notNull().default(\"view\"), // \"view\" or \"edit\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(), // \"upload\", \"download\", \"view\", \"share\", \"edit\"\n  resourceType: text(\"resource_type\").notNull(), // \"document\", \"user\", \"system\"\n  resourceId: varchar(\"resource_id\"),\n  details: jsonb(\"details\"), // additional action details\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  name: true,\n  loginCode: true,\n  role: true,\n});\n\nexport const insertFolderSchema = createInsertSchema(folders).pick({\n  name: true,\n  description: true,\n  securityCode: true,\n  hasSecurityCode: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).pick({\n  name: true,\n  originalName: true,\n  description: true,\n  category: true,\n  fileType: true,\n  fileSize: true,\n  filePath: true,\n  folderId: true,\n  metadata: true,\n  documentCode: true,\n  isTemplate: true,\n  content: true,\n  recipientInfo: true,\n});\n\n// Schema for document creation form\nexport const createDocumentSchema = z.object({\n  documentType: z.enum([\"press_release\", \"memo\", \"internal_letter\", \"external_letter\", \"contract\", \"follow_up\", \"report\"]),\n  title: z.string().min(1, \"Title is required\"),\n  fileType: z.enum([\"word\", \"excel\", \"powerpoint\"]),\n  recipientName: z.string().optional(),\n  recipientAddress: z.string().optional(),\n  recipientTitle: z.string().optional(),\n  isInternal: z.boolean().default(true),\n  folderId: z.string().optional(),\n});\n\nexport const insertDocumentShareSchema = createInsertSchema(documentShares).pick({\n  documentId: true,\n  sharedWith: true,\n  permission: true,\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).pick({\n  action: true,\n  resourceType: true,\n  resourceId: true,\n  details: true,\n  ipAddress: true,\n  userAgent: true,\n});\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Folder = typeof folders.$inferSelect;\nexport type InsertFolder = typeof folders.$inferInsert;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = typeof documents.$inferInsert;\nexport type DocumentShare = typeof documentShares.$inferSelect;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\n// Export insert types from zod schemas\nexport type CreateUser = z.infer<typeof insertUserSchema>;\nexport type CreateFolder = z.infer<typeof insertFolderSchema>;\nexport type CreateDocument = z.infer<typeof createDocumentSchema>;\nexport type InsertDocumentShare = z.infer<typeof insertDocumentShareSchema>;\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\n","size_bytes":5817},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DocumentViewer from \"@/pages/document-viewer\";\nimport DocumentEditorPage from \"@/pages/document-editor\";\nimport UserManagement from \"@/pages/admin/user-management\";\nimport ActivityLogs from \"@/pages/admin/activity-logs\";\nimport FolderPage from \"@/pages/folder-page\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/auth\" component={AuthPage} />\n      \n      {/* Protected routes */}\n      <ProtectedRoute path=\"/\" component={() => <Dashboard />} />\n      <ProtectedRoute path=\"/folders/:folderId\" component={() => <FolderPage />} />\n      <ProtectedRoute path=\"/documents/:id\" component={() => <DocumentViewer />} />\n      <ProtectedRoute path=\"/document/edit/:id\" component={() => <DocumentEditorPage />} />\n      <ProtectedRoute path=\"/admin/users\" component={() => <UserManagement />} />\n      <ProtectedRoute path=\"/admin/activity\" component={() => <ActivityLogs />} />\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1783},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Segoe+UI:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(201 32% 19%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(201 32% 19%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(201 32% 19%);\n  --primary: hsl(207 87% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(201 32% 19%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 98%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(197 96% 47%);\n  --accent-foreground: hsl(207 87% 42%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(207 87% 42%);\n  --chart-1: hsl(207 87% 42%);\n  --chart-2: hsl(159 100% 36%);\n  --chart-3: hsl(42 93% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(201 32% 19%);\n  --sidebar-primary: hsl(207 87% 42%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(197 96% 47%);\n  --sidebar-accent-foreground: hsl(207 87% 42%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(207 87% 42%);\n  --font-sans: 'Segoe UI', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -4px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.1), 0px 8px 10px -6px rgba(0, 0, 0, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* ZEOLF Brand Colors */\n  --zeolf-blue: hsl(207 87% 42%);\n  --zeolf-blue-dark: hsl(211 80% 37%);\n  --zeolf-accent: hsl(197 96% 47%);\n  --zeolf-success: hsl(124 100% 26%);\n  --zeolf-warning: hsl(36 100% 50%);\n  --zeolf-error: hsl(348 84% 50%);\n  --zeolf-bg: hsl(0 0% 98%);\n  --zeolf-surface: hsl(0 0% 100%);\n  --zeolf-text: hsl(201 32% 19%);\n  --zeolf-text-secondary: hsl(215 16% 47%);\n}\n\n.dark {\n  --background: hsl(224 71% 4%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(210 40% 98%);\n  --primary-foreground: hsl(222 84% 5%);\n  --secondary: hsl(222 84% 5%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(223 47% 11%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(216 34% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(216 34% 17%);\n  --input: hsl(216 34% 17%);\n  --ring: hsl(216 34% 17%);\n  --chart-1: hsl(220 70% 50%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --sidebar: hsl(224 71% 4%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(210 40% 98%);\n  --sidebar-primary-foreground: hsl(222 84% 5%);\n  --sidebar-accent: hsl(216 34% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(216 34% 17%);\n  --sidebar-ring: hsl(216 34% 17%);\n  \n  /* ZEOLF Brand Colors - Dark Mode */\n  --zeolf-blue: hsl(207 87% 52%);\n  --zeolf-blue-dark: hsl(211 80% 47%);\n  --zeolf-accent: hsl(197 96% 57%);\n  --zeolf-success: hsl(124 100% 36%);\n  --zeolf-warning: hsl(36 100% 60%);\n  --zeolf-error: hsl(348 84% 60%);\n  --zeolf-bg: hsl(224 71% 4%);\n  --zeolf-surface: hsl(224 71% 4%);\n  --zeolf-text: hsl(213 31% 91%);\n  --zeolf-text-secondary: hsl(215 20% 65%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* ZEOLF Custom Utilities */\n.text-zeolf-blue {\n  color: var(--zeolf-blue);\n}\n\n.text-zeolf-blue-dark {\n  color: var(--zeolf-blue-dark);\n}\n\n.text-zeolf-accent {\n  color: var(--zeolf-accent);\n}\n\n.text-zeolf-success {\n  color: var(--zeolf-success);\n}\n\n.text-zeolf-warning {\n  color: var(--zeolf-warning);\n}\n\n.text-zeolf-error {\n  color: var(--zeolf-error);\n}\n\n.text-zeolf-text {\n  color: var(--zeolf-text);\n}\n\n.text-zeolf-text-secondary {\n  color: var(--zeolf-text-secondary);\n}\n\n.bg-zeolf-blue {\n  background-color: var(--zeolf-blue);\n}\n\n.bg-zeolf-blue-dark {\n  background-color: var(--zeolf-blue-dark);\n}\n\n.bg-zeolf-accent {\n  background-color: var(--zeolf-accent);\n}\n\n.bg-zeolf-success {\n  background-color: var(--zeolf-success);\n}\n\n.bg-zeolf-warning {\n  background-color: var(--zeolf-warning);\n}\n\n.bg-zeolf-error {\n  background-color: var(--zeolf-error);\n}\n\n.bg-zeolf-bg {\n  background-color: var(--zeolf-bg);\n}\n\n.bg-zeolf-surface {\n  background-color: var(--zeolf-surface);\n}\n\n.hover\\:bg-zeolf-blue-dark:hover {\n  background-color: var(--zeolf-blue-dark);\n}\n\n.hover\\:bg-zeolf-accent\\/90:hover {\n  background-color: hsl(from var(--zeolf-accent) h s l / 0.9);\n}\n\n.border-zeolf-blue {\n  border-color: var(--zeolf-blue);\n}\n\n.focus\\:ring-zeolf-blue:focus {\n  --tw-ring-color: var(--zeolf-blue);\n}\n\n.focus\\:border-zeolf-blue:focus {\n  border-color: var(--zeolf-blue);\n}\n\n/* ZEOLF opacity utilities */\n.bg-zeolf-blue\\/10 {\n  background-color: hsl(from var(--zeolf-blue) h s l / 0.1);\n}\n\n.bg-zeolf-blue\\/5 {\n  background-color: hsl(from var(--zeolf-blue) h s l / 0.05);\n}\n\n.bg-zeolf-accent\\/10 {\n  background-color: hsl(from var(--zeolf-accent) h s l / 0.1);\n}\n\n.bg-zeolf-success\\/10 {\n  background-color: hsl(from var(--zeolf-success) h s l / 0.1);\n}\n\n.bg-zeolf-warning\\/10 {\n  background-color: hsl(from var(--zeolf-warning) h s l / 0.1);\n}\n\n.bg-zeolf-error\\/10 {\n  background-color: hsl(from var(--zeolf-error) h s l / 0.1);\n}\n","size_bytes":6134},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/document-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  MoreHorizontal, \n  Download, \n  Share, \n  Eye,\n  FileText,\n  FileSpreadsheet,\n  Presentation,\n  File\n} from \"lucide-react\";\nimport { Document } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { formatDistance } from \"date-fns\";\n\ninterface DocumentCardProps {\n  document: Document;\n}\n\nconst fileTypeIcons = {\n  pdf: { icon: FileText, color: \"text-red-600\", bgColor: \"bg-red-100\" },\n  word: { icon: FileText, color: \"text-blue-600\", bgColor: \"bg-blue-100\" },\n  excel: { icon: FileSpreadsheet, color: \"text-green-600\", bgColor: \"bg-green-100\" },\n  powerpoint: { icon: Presentation, color: \"text-orange-600\", bgColor: \"bg-orange-100\" },\n  unknown: { icon: File, color: \"text-gray-600\", bgColor: \"bg-gray-100\" },\n};\n\nconst formatFileSize = (bytes: number) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nexport function DocumentCard({ document }: DocumentCardProps) {\n  const [showMenu, setShowMenu] = useState(false);\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const fileTypeConfig = fileTypeIcons[document.fileType as keyof typeof fileTypeIcons] || fileTypeIcons.unknown;\n  const Icon = fileTypeConfig.icon;\n\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/documents/${document.id}/download`);\n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      return response.blob();\n    },\n    onSuccess: (blob) => {\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = document.originalName;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n      \n      toast({\n        title: \"Download started\",\n        description: `${document.name} is being downloaded`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleView = () => {\n    setLocation(`/documents/${document.id}`);\n  };\n\n  const handleDownload = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    downloadMutation.mutate();\n  };\n\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // TODO: Implement share functionality\n    toast({\n      title: \"Share functionality\",\n      description: \"Document sharing will be implemented here\",\n    });\n  };\n\n  return (\n    <Card \n      className=\"hover:shadow-lg transition-all duration-200 cursor-pointer group\"\n      onClick={handleView}\n      data-testid={`document-card-${document.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className={`w-10 h-10 ${fileTypeConfig.bgColor} rounded-lg flex items-center justify-center`}>\n            <Icon className={`w-5 h-5 ${fileTypeConfig.color}`} />\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"opacity-0 group-hover:opacity-100 transition-opacity\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowMenu(!showMenu);\n            }}\n            data-testid={`button-menu-${document.id}`}\n          >\n            <MoreHorizontal className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <h3 className=\"font-medium text-zeolf-text mb-1 truncate\" title={document.name}>\n          {document.name}\n        </h3>\n        \n        <p className=\"text-sm text-zeolf-text-secondary mb-2\">\n          {document.fileType.toUpperCase()} • {formatFileSize(document.fileSize)}\n        </p>\n        \n        <p className=\"text-xs text-zeolf-text-secondary\">\n          Modified {formatDistance(new Date(document.updatedAt), new Date(), { addSuffix: true })}\n        </p>\n\n        {/* Category Badge */}\n        <div className=\"mt-2\">\n          <Badge variant=\"secondary\" className=\"text-xs\">\n            {document.category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n          </Badge>\n        </div>\n\n        {/* Quick Actions */}\n        {showMenu && (\n          <div className=\"absolute top-12 right-4 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"w-full justify-start px-3 py-2 text-sm\"\n              onClick={handleView}\n              data-testid={`button-view-${document.id}`}\n            >\n              <Eye className=\"w-4 h-4 mr-2\" />\n              View\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"w-full justify-start px-3 py-2 text-sm\"\n              onClick={handleDownload}\n              disabled={downloadMutation.isPending}\n              data-testid={`button-download-${document.id}`}\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"w-full justify-start px-3 py-2 text-sm\"\n              onClick={handleShare}\n              data-testid={`button-share-${document.id}`}\n            >\n              <Share className=\"w-4 h-4 mr-2\" />\n              Share\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6046},"client/src/components/document-creator.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createDocumentSchema, type CreateDocument } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { FileText, FileSpreadsheet, Presentation, Loader2, FolderPlus } from \"lucide-react\";\nimport { FolderCreator } from \"./folder-creator\";\n\ninterface DocumentCreatorProps {\n  open?: boolean;\n  onClose?: () => void;\n  folderId?: string;\n  onDocumentCreated?: () => void;\n  onSuccess?: () => void;\n}\n\nconst documentTypeOptions = [\n  { value: \"press_release\", label: \"Press Release\", code: \"PR\" },\n  { value: \"memo\", label: \"Memo\", code: \"MEMO\" },\n  { value: \"internal_letter\", label: \"Internal Letter\", code: \"IL\" },\n  { value: \"external_letter\", label: \"External Letter\", code: \"EL\" },\n  { value: \"contract\", label: \"Contract\", code: \"CON\" },\n  { value: \"follow_up\", label: \"Follow-up\", code: \"FU\" },\n  { value: \"report\", label: \"Report\", code: \"RPT\" },\n];\n\nconst fileTypeIcons = {\n  word: FileText,\n  excel: FileSpreadsheet,\n  powerpoint: Presentation,\n};\n\nexport function DocumentCreator({ open, onClose, folderId, onDocumentCreated, onSuccess }: DocumentCreatorProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showFolderCreator, setShowFolderCreator] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showRecipientFields, setShowRecipientFields] = useState(false);\n\n  const form = useForm<CreateDocument>({\n    resolver: zodResolver(createDocumentSchema),\n    defaultValues: {\n      documentType: \"memo\",\n      title: \"\",\n      fileType: \"word\",\n      isInternal: true,\n      recipientName: \"\",\n      recipientAddress: \"\",\n      recipientTitle: \"\",\n      folderId: folderId || \"\",\n    },\n  });\n\n  const createDocumentMutation = useMutation({\n    mutationFn: async (data: CreateDocument) => {\n      const requestData = folderId ? { ...data, folderId } : data;\n      const response = await apiRequest(\"POST\", \"/api/documents/create\", requestData);\n      return await response.json();\n    },\n    onSuccess: (document) => {\n      toast({\n        title: \"Document created successfully\",\n        description: `${document.name} has been created with code ${document.documentCode}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      if (folderId) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/folders\", folderId, \"documents\"] });\n      }\n      if (open !== undefined) {\n        onClose?.();\n      } else {\n        setIsOpen(false);\n      }\n      form.reset();\n      onDocumentCreated?.();\n      onSuccess?.();\n      // Redirect to document editor\n      window.location.href = `/document/edit/${document.id}`;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create document\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const watchDocumentType = form.watch(\"documentType\");\n  const watchFileType = form.watch(\"fileType\");\n\n  // Show recipient fields for letters\n  const isLetter = watchDocumentType === \"internal_letter\" || watchDocumentType === \"external_letter\";\n\n  const onSubmit = (data: CreateDocument) => {\n    createDocumentMutation.mutate(data);\n  };\n\n  const selectedDocType = documentTypeOptions.find(opt => opt.value === watchDocumentType);\n  const FileTypeIcon = fileTypeIcons[watchFileType];\n\n  const dialogOpen = open !== undefined ? open : isOpen;\n  const handleOpenChange = onClose || ((open: boolean) => setIsOpen(open));\n\n  const DialogComponent = () => (\n    <Dialog open={dialogOpen} onOpenChange={handleOpenChange}>\n      {open === undefined && (\n        <Button \n          className=\"bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n          onClick={() => setIsOpen(true)}\n          data-testid=\"button-create-document\"\n        >\n          <FileText className=\"w-4 h-4 mr-2\" />\n          Create Document\n        </Button>\n      )}\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"document-creator-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileTypeIcon className=\"h-5 w-5\" />\n            Create New Document\n          </DialogTitle>\n          <DialogDescription>\n            Create a new {selectedDocType?.label || 'document'} with automatic document coding and ZEOLF company headers.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Document Type Selection */}\n            <FormField\n              control={form.control}\n              name=\"documentType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Document Type</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-document-type\">\n                        <SelectValue placeholder=\"Select document type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {documentTypeOptions.map((option) => (\n                        <SelectItem key={option.value} value={option.value}>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-mono text-xs bg-gray-100 dark:bg-gray-800 px-1 rounded\">\n                              {option.code}\n                            </span>\n                            {option.label}\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* File Type Selection */}\n            <FormField\n              control={form.control}\n              name=\"fileType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>File Format</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-file-type\">\n                        <SelectValue placeholder=\"Select file format\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"word\">\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4\" />\n                          Microsoft Word Document\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"excel\">\n                        <div className=\"flex items-center gap-2\">\n                          <FileSpreadsheet className=\"h-4 w-4\" />\n                          Microsoft Excel Spreadsheet\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"powerpoint\">\n                        <div className=\"flex items-center gap-2\">\n                          <Presentation className=\"h-4 w-4\" />\n                          Microsoft PowerPoint Presentation\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Document Title */}\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Document Title</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder={`Enter ${selectedDocType?.label.toLowerCase()} title...`}\n                      data-testid=\"input-document-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Internal/External Toggle for Letters */}\n            {isLetter && (\n              <FormField\n                control={form.control}\n                name=\"isInternal\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel>Letter Type</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {field.value ? \"Internal letter (within organization)\" : \"External letter (to outside recipients)\"}\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-letter-type\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Recipient Information for Letters */}\n            {isLetter && (\n              <div className=\"space-y-4 p-4 border rounded-lg\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-medium\">Recipient Information</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowRecipientFields(!showRecipientFields)}\n                    data-testid=\"toggle-recipient-fields\"\n                  >\n                    {showRecipientFields ? \"Hide\" : \"Add\"} Recipient Details\n                  </Button>\n                </div>\n                \n                {showRecipientFields && (\n                  <div className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"recipientName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Recipient Name</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"Enter recipient's full name\" data-testid=\"input-recipient-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"recipientTitle\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Recipient Title/Position</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Chief Executive Officer, Department Manager\" data-testid=\"input-recipient-title\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"recipientAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Recipient Address</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              {...field} \n                              placeholder=\"Enter complete mailing address\"\n                              rows={3}\n                              data-testid=\"input-recipient-address\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Document Preview Info */}\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <h3 className=\"font-medium mb-2\">Document Preview</h3>\n              <div className=\"space-y-1 text-sm\">\n                <p><span className=\"font-medium\">Type:</span> {selectedDocType?.label}</p>\n                <p><span className=\"font-medium\">Code:</span> {selectedDocType?.code}-2024-XXX (auto-generated)</p>\n                <p><span className=\"font-medium\">Format:</span> {watchFileType.toUpperCase()}</p>\n                <p><span className=\"font-medium\">Header:</span> ZEOLF Technology logo with creation date</p>\n                <p><span className=\"font-medium\">Footer:</span> Document type and code number</p>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-between pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowFolderCreator(true)}\n                disabled={createDocumentMutation.isPending}\n                className=\"border-blue-200 text-blue-600 hover:bg-blue-50 hover:border-blue-300\"\n                data-testid=\"button-new-folder\"\n              >\n                <FolderPlus className=\"w-4 h-4 mr-2\" />\n                New Folder\n              </Button>\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => handleOpenChange(false)}\n                  disabled={createDocumentMutation.isPending}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createDocumentMutation.isPending}\n                  data-testid=\"button-create-document\"\n                >\n                  {createDocumentMutation.isPending && (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  )}\n                  Create Document\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n\n  const handleFolderCreated = () => {\n    setShowFolderCreator(false);\n    // Refresh the page or update folder list\n    queryClient.invalidateQueries({ queryKey: [\"/api/folders\"] });\n    toast({\n      title: \"Folder created\",\n      description: \"New folder has been created successfully.\",\n    });\n  };\n\n  return (\n    <>\n      <DialogComponent />\n      <FolderCreator\n        isOpen={showFolderCreator}\n        onClose={() => setShowFolderCreator(false)}\n        onSuccess={handleFolderCreated}\n      />\n    </>\n  );\n}","size_bytes":15564},"client/src/components/document-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Document } from \"@shared/schema\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Save, \n  Download, \n  Upload,\n  FileText, \n  FileSpreadsheet, \n  Presentation,\n  Calendar,\n  Code,\n  Building2,\n  Loader2\n} from \"lucide-react\";\n\ninterface DocumentEditorProps {\n  documentId: string;\n}\n\ninterface DocumentContent {\n  title: string;\n  body: string;\n  cells?: { [key: string]: string }; // For Excel\n  slides?: Array<{ title: string; content: string }>; // For PowerPoint\n}\n\nexport function DocumentEditor({ documentId }: DocumentEditorProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [content, setContent] = useState<DocumentContent>({\n    title: \"\",\n    body: \"\",\n    cells: {},\n    slides: [{ title: \"\", content: \"\" }]\n  });\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n\n  // Fetch document data\n  const { data: document, isLoading } = useQuery<Document>({\n    queryKey: [\"/api/documents\", documentId],\n  });\n\n  // Auto-save mutation\n  const saveDocumentMutation = useMutation({\n    mutationFn: async (updatedContent: DocumentContent) => {\n      const response = await apiRequest(\"PUT\", `/api/documents/${documentId}/content`, {\n        content: updatedContent\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setHasUnsavedChanges(false);\n      toast({\n        title: \"Document saved\",\n        description: \"Your changes have been saved automatically\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to save\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Export to PDF mutation\n  const exportToPdfMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/documents/${documentId}/export-pdf`);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = `${document?.name || 'document'}.pdf`;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"PDF exported\",\n        description: \"Your document has been exported successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Export failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update document file mutation\n  const updateDocumentMutation = useMutation({\n    mutationFn: async (file: File) => {\n      console.log('Starting file update mutation for:', file.name);\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"keepSameId\", \"true\");\n      \n      const response = await fetch(`/api/documents/${documentId}/update`, {\n        method: \"PUT\",\n        body: formData,\n        credentials: \"include\",\n      });\n      \n      console.log('Update response status:', response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Update failed:', errorText);\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { message: errorText };\n        }\n        throw new Error(errorData.message || \"Update failed\");\n      }\n      \n      const result = await response.json();\n      console.log('Update successful:', result);\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('Update mutation success, invalidating queries');\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\", documentId] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      setShowUpdateModal(false);\n      toast({\n        title: \"Document updated\",\n        description: \"File has been updated successfully with the same document ID\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Update mutation error:', error);\n      toast({\n        title: \"Update failed\", \n        description: error.message || \"Could not update document file\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Load initial content\n  useEffect(() => {\n    if (document?.content) {\n      setContent(document.content as DocumentContent);\n    }\n  }, [document]);\n\n  // Auto-save every 30 seconds if there are changes\n  useEffect(() => {\n    if (hasUnsavedChanges) {\n      const timer = setTimeout(() => {\n        saveDocumentMutation.mutate(content);\n      }, 30000);\n      return () => clearTimeout(timer);\n    }\n  }, [hasUnsavedChanges, content, saveDocumentMutation]);\n\n  const handleContentChange = (field: keyof DocumentContent, value: any) => {\n    setContent(prev => ({ ...prev, [field]: value }));\n    setHasUnsavedChanges(true);\n  };\n\n  const handleSave = () => {\n    saveDocumentMutation.mutate(content);\n  };\n\n  const handleExport = () => {\n    exportToPdfMutation.mutate();\n  };\n\n  const handleFileUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log('=== UPDATE BUTTON DIAGNOSIS ===');\n    console.log('File input change event triggered');\n    console.log('Event target:', event.target);\n    console.log('Files array:', event.target.files);\n    console.log('Document ID:', documentId);\n    \n    const file = event.target.files?.[0];\n    if (file) {\n      console.log('✓ File selected successfully:');\n      console.log('  - Name:', file.name);\n      console.log('  - Size:', file.size, 'bytes');\n      console.log('  - Type:', file.type);\n      console.log('  - Last modified:', new Date(file.lastModified));\n      console.log('Starting mutation...');\n      \n      updateDocumentMutation.mutate(file);\n      \n      // Reset the input so the same file can be selected again if needed\n      event.target.value = '';\n    } else {\n      console.log('✗ No file selected - files array is empty');\n    }\n    console.log('=== END DIAGNOSIS ===');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n      </div>\n    );\n  }\n\n  if (!document) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-muted-foreground\">Document not found</p>\n      </div>\n    );\n  }\n\n  const getFileIcon = () => {\n    switch (document.fileType) {\n      case \"excel\": return <FileSpreadsheet className=\"h-5 w-5\" />;\n      case \"powerpoint\": return <Presentation className=\"h-5 w-5\" />;\n      default: return <FileText className=\"h-5 w-5\" />;\n    }\n  };\n\n  const renderEditor = () => {\n    switch (document.fileType) {\n      case \"word\":\n        return (\n          <div className=\"space-y-4\">\n            <input\n              type=\"text\"\n              value={content.title}\n              onChange={(e) => handleContentChange(\"title\", e.target.value)}\n              className=\"w-full text-2xl font-bold border-none outline-none bg-transparent\"\n              placeholder=\"Document Title\"\n              data-testid=\"input-document-title\"\n            />\n            <Separator />\n            <textarea\n              value={content.body}\n              onChange={(e) => handleContentChange(\"body\", e.target.value)}\n              className=\"w-full h-96 p-4 border rounded-lg resize-none outline-none\"\n              placeholder=\"Start writing your document content...\"\n              data-testid=\"textarea-document-body\"\n            />\n          </div>\n        );\n\n      case \"excel\":\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Spreadsheet Editor</h3>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {Array.from({ length: 20 }, (_, i) => (\n                <input\n                  key={i}\n                  type=\"text\"\n                  value={content.cells?.[`cell_${i}`] || \"\"}\n                  onChange={(e) => \n                    handleContentChange(\"cells\", {\n                      ...content.cells,\n                      [`cell_${i}`]: e.target.value\n                    })\n                  }\n                  className=\"p-2 border rounded text-sm\"\n                  placeholder={`Cell ${String.fromCharCode(65 + (i % 4))}${Math.floor(i / 4) + 1}`}\n                  data-testid={`input-cell-${i}`}\n                />\n              ))}\n            </div>\n          </div>\n        );\n\n      case \"powerpoint\":\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Presentation Editor</h3>\n            {content.slides?.map((slide, index) => (\n              <Card key={index} className=\"p-4\">\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Slide {index + 1}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <input\n                    type=\"text\"\n                    value={slide.title}\n                    onChange={(e) => {\n                      const newSlides = [...(content.slides || [])];\n                      newSlides[index] = { ...slide, title: e.target.value };\n                      handleContentChange(\"slides\", newSlides);\n                    }}\n                    className=\"w-full text-lg font-semibold border-none outline-none bg-transparent\"\n                    placeholder=\"Slide Title\"\n                    data-testid={`input-slide-title-${index}`}\n                  />\n                  <textarea\n                    value={slide.content}\n                    onChange={(e) => {\n                      const newSlides = [...(content.slides || [])];\n                      newSlides[index] = { ...slide, content: e.target.value };\n                      handleContentChange(\"slides\", newSlides);\n                    }}\n                    className=\"w-full h-32 p-2 border rounded resize-none\"\n                    placeholder=\"Slide Content\"\n                    data-testid={`textarea-slide-content-${index}`}\n                  />\n                </CardContent>\n              </Card>\n            ))}\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                const newSlides = [...(content.slides || []), { title: \"\", content: \"\" }];\n                handleContentChange(\"slides\", newSlides);\n              }}\n              data-testid=\"button-add-slide\"\n            >\n              Add Slide\n            </Button>\n          </div>\n        );\n\n      default:\n        return <p>Unsupported file type for editing</p>;\n    }\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      {/* Document Header */}\n      <Card className=\"mb-6\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {getFileIcon()}\n              <div>\n                <h1 className=\"text-2xl font-bold\">{document.name}</h1>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Building2 className=\"h-4 w-4\" />\n                  <span>ZEOLF Technology</span>\n                  <Separator orientation=\"vertical\" className=\"h-4\" />\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{new Date(document.createdAt).toLocaleDateString()}</span>\n                  <Separator orientation=\"vertical\" className=\"h-4\" />\n                  <Code className=\"h-4 w-4\" />\n                  <span>{document.documentCode}</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">{document.category}</Badge>\n              <Badge variant=\"secondary\">{document.fileType.toUpperCase()}</Badge>\n            </div>\n          </div>\n        </CardHeader>\n        \n        {/* Company Header */}\n        <CardContent className=\"pt-0\">\n          <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg border-l-4 border-blue-500\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"font-bold text-lg text-blue-700 dark:text-blue-300\">ZEOLF TECHNOLOGY</h2>\n                <p className=\"text-sm text-blue-600 dark:text-blue-400\">Document Management System</p>\n              </div>\n              <div className=\"text-right text-sm text-blue-600 dark:text-blue-400\">\n                <p>Created: {new Date(document.createdAt).toLocaleDateString()}</p>\n                <p>Code: {document.documentCode}</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-2\">\n          {hasUnsavedChanges && (\n            <Badge variant=\"secondary\" className=\"text-orange-600\">\n              Unsaved Changes\n            </Badge>\n          )}\n          {saveDocumentMutation.isPending && (\n            <Badge variant=\"secondary\" className=\"text-blue-600\">\n              <Loader2 className=\"h-3 w-3 animate-spin mr-1\" />\n              Saving...\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleSave}\n            disabled={saveDocumentMutation.isPending || !hasUnsavedChanges}\n            data-testid=\"button-save-document\"\n          >\n            {saveDocumentMutation.isPending ? (\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            ) : (\n              <Save className=\"mr-2 h-4 w-4\" />\n            )}\n            Save\n          </Button>\n\n          {/* Diagnostic test button */}\n          <Button\n            variant=\"outline\"\n            className=\"border-red-200 text-red-600 hover:bg-red-50\"\n            onClick={() => {\n              console.log('🔧 DIAGNOSTIC TEST BUTTON CLICKED');\n              console.log('Document ID:', documentId);\n              console.log('Mutation pending:', updateDocumentMutation.isPending);\n              console.log('Document object:', document);\n              alert('Diagnostic test - check console for details');\n            }}\n          >\n            Test\n          </Button>\n\n          <label \n            className=\"relative cursor-pointer inline-block\"\n            onClick={() => console.log('✓ Label clicked - should trigger file dialog')}\n          >\n            <div className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-blue-200 bg-background hover:bg-blue-50 hover:border-blue-300 h-10 px-4 py-2 text-blue-600\">\n              {updateDocumentMutation.isPending ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <Upload className=\"mr-2 h-4 w-4\" />\n              )}\n              Update\n            </div>\n            <input\n              type=\"file\"\n              onChange={handleFileUpdate}\n              onClick={() => console.log('✓ File input clicked')}\n              className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n              accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx\"\n              data-testid=\"input-file-update\"\n              disabled={updateDocumentMutation.isPending}\n              style={{ zIndex: 10 }}\n            />\n          </label>\n          \n          <Button\n            onClick={handleExport}\n            disabled={exportToPdfMutation.isPending}\n            data-testid=\"button-export-pdf\"\n          >\n            {exportToPdfMutation.isPending ? (\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            ) : (\n              <Download className=\"mr-2 h-4 w-4\" />\n            )}\n            Export PDF\n          </Button>\n        </div>\n      </div>\n\n      {/* Document Editor */}\n      <Card>\n        <CardContent className=\"p-6\">\n          {renderEditor()}\n        </CardContent>\n      </Card>\n\n      {/* Document Footer Preview */}\n      <Card className=\"mt-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"bg-gray-50 dark:bg-gray-900 p-4 rounded border-t-2 border-gray-300\">\n            <div className=\"flex items-center justify-between text-sm text-gray-600 dark:text-gray-400\">\n              <div>\n                <p className=\"font-medium\">ZEOLF Technology - {document.category.replace('_', ' ').toUpperCase()}</p>\n              </div>\n              <div className=\"text-right\">\n                <p>Document Code: {document.documentCode}</p>\n                <p>Generated: {new Date().toLocaleDateString()}</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17457},"client/src/components/file-library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { \n  Folder, \n  FolderOpen, \n  Lock, \n  Unlock,\n  Search,\n  Grid3X3,\n  List,\n  Clock,\n  Users,\n  Plus\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { FolderCreator } from \"./folder-creator\";\nimport type { Folder as FolderType } from \"@shared/schema\";\n\nexport function FileLibrary() {\n  const [, navigate] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showFolderCreator, setShowFolderCreator] = useState(false);\n\n  // Fetch all folders\n  const { data: folders = [], isLoading } = useQuery<FolderType[]>({\n    queryKey: [\"/api/folders\"],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n      if (res.status === 401) return [];\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n  });\n\n  // Filter folders based on search\n  const filteredFolders = folders.filter(folder =>\n    folder.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (folder.description && folder.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleFolderClick = (folderId: string) => {\n    navigate(`/folders/${folderId}`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"h-8 w-32 bg-gray-200 rounded animate-pulse\"></div>\n          <div className=\"h-10 w-32 bg-gray-200 rounded animate-pulse\"></div>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-white rounded-lg shadow-sm border p-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-zeolf-text-primary\">Document Folders</h2>\n          <p className=\"text-zeolf-text-secondary\">\n            Organize your documents in secure folders\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowFolderCreator(true)}\n          className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n          data-testid=\"button-create-folder-plus\"\n        >\n          <Plus className=\"w-4 h-4\" />\n        </Button>\n      </div>\n\n      {/* Search and View Controls */}\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"relative flex-1 max-w-md\">\n          <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <Input\n            placeholder=\"Search folders...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-folders\"\n          />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"grid\")}\n            data-testid=\"button-grid-view\"\n          >\n            <Grid3X3 className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setViewMode(\"list\")}\n            data-testid=\"button-list-view\"\n          >\n            <List className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Folder Grid/List */}\n      {filteredFolders.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <Folder className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n            {searchQuery ? \"No folders found\" : \"No folders yet\"}\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            {searchQuery \n              ? \"Try adjusting your search terms\"\n              : \"Create your first folder to organize your documents\"}\n          </p>\n          {!searchQuery && <FolderCreator />}\n        </div>\n      ) : (\n        <div className={viewMode === \"grid\" \n          ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\" \n          : \"space-y-3\"\n        }>\n          {filteredFolders.map((folder) => (\n            <Card \n              key={folder.id}\n              className=\"hover:shadow-md transition-all duration-200 cursor-pointer hover:scale-[1.02] group\"\n              onClick={() => handleFolderClick(folder.id)}\n              data-testid={`folder-card-${folder.id}`}\n            >\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"relative\">\n                      {folder.hasSecurityCode ? (\n                        <div className=\"relative\">\n                          <Folder className=\"w-8 h-8 text-zeolf-primary group-hover:hidden\" />\n                          <FolderOpen className=\"w-8 h-8 text-zeolf-primary hidden group-hover:block\" />\n                          <Lock className=\"w-3 h-3 absolute -top-1 -right-1 text-yellow-500 bg-white rounded-full p-0.5\" />\n                        </div>\n                      ) : (\n                        <div className=\"relative\">\n                          <Folder className=\"w-8 h-8 text-zeolf-primary group-hover:hidden\" />\n                          <FolderOpen className=\"w-8 h-8 text-zeolf-primary hidden group-hover:block\" />\n                          <Unlock className=\"w-3 h-3 absolute -top-1 -right-1 text-green-500 bg-white rounded-full p-0.5\" />\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-sm font-medium line-clamp-1\">\n                        {folder.name}\n                      </CardTitle>\n                      {folder.description && (\n                        <p className=\"text-xs text-gray-500 line-clamp-2 mt-1\">\n                          {folder.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                  {folder.hasSecurityCode && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      Protected\n                    </Badge>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    <span>{new Date(folder.createdAt).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"w-3 h-3\" />\n                    <span>Private</span>\n                  </div>\n                </div>\n                \n                {/* Hover Actions */}\n                <div className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-200 mt-3\">\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleFolderClick(folder.id);\n                    }}\n                  >\n                    Open Folder\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      {filteredFolders.length > 0 && (\n        <div className=\"flex items-center justify-center gap-6 pt-6 text-sm text-gray-500 border-t\">\n          <span>{filteredFolders.length} folders</span>\n          <span>•</span>\n          <span>{filteredFolders.filter(f => f.hasSecurityCode).length} protected</span>\n          <span>•</span>\n          <span>{filteredFolders.filter(f => !f.hasSecurityCode).length} open access</span>\n        </div>\n      )}\n\n      {/* Folder Creator Modal */}\n      <FolderCreator \n        isOpen={showFolderCreator}\n        onClose={() => setShowFolderCreator(false)}\n        onSuccess={() => setShowFolderCreator(false)}\n      />\n    </div>\n  );\n}","size_bytes":9127},"client/src/components/file-uploader.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Upload, FileText, X, Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FileUploaderProps {\n  open: boolean;\n  onClose: () => void;\n  folderId: string;\n  onSuccess?: () => void;\n}\n\nexport function FileUploader({ open, onClose, folderId, onSuccess }: FileUploaderProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [category, setCategory] = useState(\"memos\");\n  const [description, setDescription] = useState(\"\");\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const uploadMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedFile) throw new Error(\"No file selected\");\n\n      const formData = new FormData();\n      formData.append(\"file\", selectedFile);\n      formData.append(\"category\", category);\n      formData.append(\"description\", description);\n      formData.append(\"folderId\", folderId);\n\n      // Simulate upload progress\n      const progressInterval = setInterval(() => {\n        setUploadProgress(prev => {\n          if (prev >= 90) {\n            clearInterval(progressInterval);\n            return prev;\n          }\n          return prev + Math.random() * 20;\n        });\n      }, 200);\n\n      const response = await fetch(\"/api/documents/upload\", {\n        method: \"POST\",\n        body: formData,\n        credentials: \"include\",\n      });\n\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Upload failed\");\n      }\n\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"File uploaded successfully\",\n        description: \"Your file has been added to the folder\",\n      });\n      \n      // Invalidate and refetch folder documents\n      queryClient.invalidateQueries({ queryKey: [\"/api/folders\", folderId, \"documents\"] });\n      \n      // Reset form\n      setSelectedFile(null);\n      setCategory(\"memos\");\n      setDescription(\"\");\n      setUploadProgress(0);\n      \n      onSuccess?.();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Could not upload file. Please try again.\",\n        variant: \"destructive\",\n      });\n      setUploadProgress(0);\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file type\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-powerpoint',\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      ];\n\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select a PDF, Word, Excel, or PowerPoint file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Check file size (50MB limit)\n      if (file.size > 50 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select a file smaller than 50MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n    }\n  };\n\n  const handleUpload = () => {\n    if (!selectedFile) {\n      toast({\n        title: \"No file selected\",\n        description: \"Please select a file to upload\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadMutation.mutate();\n  };\n\n  const handleClose = () => {\n    if (!uploadMutation.isPending) {\n      setSelectedFile(null);\n      setCategory(\"memos\");\n      setDescription(\"\");\n      setUploadProgress(0);\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Upload className=\"w-5 h-5 text-zeolf-blue\" />\n            Upload File to Folder\n          </DialogTitle>\n          <DialogDescription>\n            Upload an existing document file to this folder. Supported formats: PDF, Word, Excel, PowerPoint.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* File Selection */}\n          <div className=\"space-y-2\">\n            <Label>Select File</Label>\n            <div \n              className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                selectedFile \n                  ? 'border-zeolf-blue bg-zeolf-blue/5' \n                  : 'border-gray-300 hover:border-zeolf-blue hover:bg-gray-50'\n              }`}\n            >\n              {selectedFile ? (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className=\"w-8 h-8 text-zeolf-blue\" />\n                    <div className=\"text-left\">\n                      <p className=\"font-medium text-gray-900\">{selectedFile.name}</p>\n                      <p className=\"text-sm text-gray-500\">\n                        {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedFile(null)}\n                    disabled={uploadMutation.isPending}\n                    data-testid=\"button-remove-file\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ) : (\n                <div>\n                  <Upload className=\"w-12 h-12 mx-auto text-gray-400 mb-4\" />\n                  <p className=\"text-gray-600 mb-2\">Click to select a file</p>\n                  <p className=\"text-sm text-gray-500\">\n                    PDF, Word, Excel, or PowerPoint (max 50MB)\n                  </p>\n                  <input\n                    type=\"file\"\n                    onChange={handleFileSelect}\n                    accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx\"\n                    className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                    disabled={uploadMutation.isPending}\n                    data-testid=\"input-file-upload\"\n                  />\n                </div>\n              )}\n            </div>\n            {!selectedFile && (\n              <input\n                type=\"file\"\n                onChange={handleFileSelect}\n                accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx\"\n                className=\"hidden\"\n                disabled={uploadMutation.isPending}\n                id=\"file-input\"\n              />\n            )}\n          </div>\n\n          {/* Category Selection */}\n          <div className=\"space-y-2\">\n            <Label>Document Category</Label>\n            <Select value={category} onValueChange={setCategory} disabled={uploadMutation.isPending}>\n              <SelectTrigger data-testid=\"select-file-category\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"press_releases\">Press Releases</SelectItem>\n                <SelectItem value=\"memos\">Memos</SelectItem>\n                <SelectItem value=\"internal_letters\">Internal Letters</SelectItem>\n                <SelectItem value=\"contracts\">Contracts</SelectItem>\n                <SelectItem value=\"follow_ups\">Follow-ups</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Description */}\n          <div className=\"space-y-2\">\n            <Label>Description (Optional)</Label>\n            <Textarea\n              placeholder=\"Add a description for this document...\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              rows={3}\n              disabled={uploadMutation.isPending}\n              data-testid=\"input-file-description\"\n            />\n          </div>\n\n          {/* Upload Progress */}\n          {uploadMutation.isPending && (\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span>Uploading...</span>\n                <span>{Math.round(uploadProgress)}%</span>\n              </div>\n              <Progress value={uploadProgress} className=\"w-full\" />\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center justify-end gap-3 pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={uploadMutation.isPending}\n              data-testid=\"button-cancel-upload\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpload}\n              disabled={!selectedFile || uploadMutation.isPending}\n              className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n              data-testid=\"button-confirm-upload\"\n            >\n              {uploadMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload File\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10381},"client/src/components/file-viewer.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Download, \n  Eye, \n  Edit,\n  Search,\n  Filter,\n  FileText,\n  FileSpreadsheet,\n  Presentation,\n  File,\n  Calendar,\n  User,\n  Folder,\n  Grid3X3,\n  List\n} from \"lucide-react\";\nimport { Document } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { formatDistance } from \"date-fns\";\n\nconst fileTypeIcons = {\n  pdf: { icon: FileText, color: \"text-red-600\", bgColor: \"bg-red-100\" },\n  word: { icon: FileText, color: \"text-blue-600\", bgColor: \"bg-blue-100\" },\n  excel: { icon: FileSpreadsheet, color: \"text-green-600\", bgColor: \"bg-green-100\" },\n  powerpoint: { icon: Presentation, color: \"text-orange-600\", bgColor: \"bg-orange-100\" },\n  unknown: { icon: File, color: \"text-gray-600\", bgColor: \"bg-gray-100\" },\n};\n\nconst categoryLabels = {\n  press_releases: \"Press Releases\",\n  memos: \"Memos\", \n  internal_letters: \"Internal Letters\",\n  contracts: \"Contracts\",\n  follow_ups: \"Follow-ups\",\n};\n\nconst formatFileSize = (bytes: number) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\ninterface FileViewerProps {\n  onClose: () => void;\n}\n\nexport function FileViewer({ onClose }: FileViewerProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"list\");\n  const [sortBy, setSortBy] = useState(\"modified\");\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch documents\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: [\"/api/documents\", { category: selectedCategory, search: searchQuery }],\n  });\n\n  const downloadMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}/download`);\n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      const blob = await response.blob();\n      const document = documents.find(d => d.id === documentId);\n      return { blob, document };\n    },\n    onSuccess: ({ blob, document }) => {\n      if (!document) return;\n      \n      const url = window.URL.createObjectURL(blob);\n      const a = window.document.createElement('a');\n      a.href = url;\n      a.download = document.originalName;\n      window.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      window.document.body.removeChild(a);\n      \n      toast({\n        title: \"Download completed\",\n        description: `${document.name} has been downloaded for offline editing`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownload = (documentId: string) => {\n    downloadMutation.mutate(documentId);\n  };\n\n  const handleView = (documentId: string) => {\n    setLocation(`/documents/${documentId}`);\n  };\n\n  const handleEdit = (documentId: string) => {\n    setLocation(`/document/edit/${documentId}`);\n  };\n\n  const filteredAndSortedDocuments = documents\n    .filter(doc => {\n      if (selectedCategory && selectedCategory !== \"all\" && doc.category !== selectedCategory) return false;\n      if (searchQuery && !doc.name.toLowerCase().includes(searchQuery.toLowerCase())) return false;\n      return true;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"size\":\n          return b.fileSize - a.fileSize;\n        case \"modified\":\n        default:\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n      }\n    });\n\n  if (isLoading) {\n    return (\n      <Card className=\"w-full h-96\">\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-semibold text-zeolf-text\">\n            <Folder className=\"w-5 h-5 inline mr-2\" />\n            Document Library\n          </CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose} data-testid=\"button-close-file-viewer\">\n            ×\n          </Button>\n        </div>\n        \n        {/* Search and Filter Controls */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mt-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search documents...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-documents\"\n            />\n          </div>\n          \n          <Select value={selectedCategory} onValueChange={setSelectedCategory} data-testid=\"select-category-filter\">\n            <SelectTrigger className=\"w-full sm:w-48\">\n              <SelectValue placeholder=\"All Categories\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              {Object.entries(categoryLabels).map(([key, label]) => (\n                <SelectItem key={key} value={key}>{label}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          \n          <Select value={sortBy} onValueChange={setSortBy} data-testid=\"select-sort-by\">\n            <SelectTrigger className=\"w-full sm:w-32\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"modified\">Modified</SelectItem>\n              <SelectItem value=\"name\">Name</SelectItem>\n              <SelectItem value=\"size\">Size</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <div className=\"flex gap-1\">\n            <Button\n              variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"button-list-view\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"grid\")}\n              data-testid=\"button-grid-view\"\n            >\n              <Grid3X3 className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        {filteredAndSortedDocuments.length === 0 ? (\n          <div className=\"text-center py-12 text-gray-500\">\n            <File className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p className=\"text-lg font-medium mb-2\">No documents found</p>\n            <p className=\"text-sm\">Try adjusting your search or filter criteria</p>\n          </div>\n        ) : viewMode === \"list\" ? (\n          <div className=\"space-y-2\">\n            {filteredAndSortedDocuments.map((document) => {\n              const fileTypeConfig = fileTypeIcons[document.fileType as keyof typeof fileTypeIcons] || fileTypeIcons.unknown;\n              const Icon = fileTypeConfig.icon;\n              \n              return (\n                <div\n                  key={document.id}\n                  className=\"flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50 transition-colors\"\n                  data-testid={`document-row-${document.id}`}\n                >\n                  <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                    <div className={`w-10 h-10 ${fileTypeConfig.bgColor} rounded-lg flex items-center justify-center flex-shrink-0`}>\n                      <Icon className={`w-5 h-5 ${fileTypeConfig.color}`} />\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <h3 className=\"font-medium text-zeolf-text truncate\" title={document.name}>\n                        {document.name}\n                      </h3>\n                      <div className=\"flex items-center gap-4 text-sm text-gray-500 mt-1\">\n                        <span>{document.fileType.toUpperCase()}</span>\n                        <span>{formatFileSize(document.fileSize)}</span>\n                        <span>Modified {formatDistance(new Date(document.updatedAt), new Date(), { addSuffix: true })}</span>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {categoryLabels[document.category as keyof typeof categoryLabels]}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1 ml-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleView(document.id)}\n                      title=\"View document\"\n                      data-testid={`button-view-${document.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(document.id)}\n                      title=\"Edit document\"\n                      data-testid={`button-edit-${document.id}`}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDownload(document.id)}\n                      disabled={downloadMutation.isPending}\n                      title=\"Download for offline editing\"\n                      data-testid={`button-download-${document.id}`}\n                    >\n                      <Download className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n            {filteredAndSortedDocuments.map((document) => {\n              const fileTypeConfig = fileTypeIcons[document.fileType as keyof typeof fileTypeIcons] || fileTypeIcons.unknown;\n              const Icon = fileTypeConfig.icon;\n              \n              return (\n                <Card \n                  key={document.id}\n                  className=\"hover:shadow-lg transition-all duration-200 cursor-pointer group\"\n                  data-testid={`document-card-${document.id}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"text-center\">\n                      <div className={`w-12 h-12 ${fileTypeConfig.bgColor} rounded-lg flex items-center justify-center mx-auto mb-3`}>\n                        <Icon className={`w-6 h-6 ${fileTypeConfig.color}`} />\n                      </div>\n                      \n                      <h3 className=\"font-medium text-zeolf-text mb-2 truncate\" title={document.name}>\n                        {document.name}\n                      </h3>\n                      \n                      <p className=\"text-xs text-gray-500 mb-3\">\n                        {document.fileType.toUpperCase()} • {formatFileSize(document.fileSize)}\n                      </p>\n                      \n                      <div className=\"flex justify-center gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleView(document.id)}\n                          data-testid={`button-view-${document.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(document.id)}\n                          data-testid={`button-edit-${document.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDownload(document.id)}\n                          disabled={downloadMutation.isPending}\n                          data-testid={`button-download-${document.id}`}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13973},"client/src/components/folder-creator.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, FolderPlus, Lock } from \"lucide-react\";\nimport { z } from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst createFolderSchema = z.object({\n  name: z.string().min(1, \"Folder name is required\").max(100, \"Name too long\"),\n  description: z.string().optional(),\n  hasSecurityCode: z.boolean().default(false),\n  securityCode: z.string().optional(),\n});\n\ntype CreateFolderData = z.infer<typeof createFolderSchema>;\n\ninterface FolderCreatorProps {\n  isOpen?: boolean;\n  onClose?: () => void;\n  onSuccess?: () => void;\n}\n\nexport function FolderCreator({ isOpen, onClose, onSuccess }: FolderCreatorProps) {\n  const [open, setOpen] = useState(false);\n  \n  // Use external control when provided, otherwise use internal state\n  const dialogOpen = isOpen !== undefined ? isOpen : open;\n  const setDialogOpen = (newOpen: boolean) => {\n    if (isOpen !== undefined) {\n      if (!newOpen) onClose?.();\n    } else {\n      setOpen(newOpen);\n    }\n  };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateFolderData>({\n    resolver: zodResolver(createFolderSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      hasSecurityCode: false,\n      securityCode: \"\",\n    },\n  });\n\n  const createFolderMutation = useMutation({\n    mutationFn: async (data: CreateFolderData) => {\n      const folderData = {\n        ...data,\n        description: data.description || null,\n        securityCode: data.hasSecurityCode ? data.securityCode : null,\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/folders\", folderData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/folders\"] });\n      toast({\n        title: \"Folder created\",\n        description: \"Your new folder has been created successfully.\",\n      });\n      form.reset();\n      setDialogOpen(false);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating folder\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const watchHasSecurityCode = form.watch(\"hasSecurityCode\");\n\n  return (\n    <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n      {/* Only show trigger when not controlled externally */}\n      {isOpen === undefined && (\n        <DialogTrigger asChild>\n          <Button \n            size=\"sm\" \n            className=\"bg-zeolf-primary hover:bg-zeolf-primary-dark text-white\"\n            data-testid=\"button-create-folder\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Folder\n          </Button>\n        </DialogTrigger>\n      )}\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FolderPlus className=\"w-5 h-5\" />\n            Create New Folder\n          </DialogTitle>\n          <DialogDescription>\n            Create a new folder to organize your documents. Optionally add a security code for restricted access.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form \n            onSubmit={form.handleSubmit((data) => createFolderMutation.mutate(data))}\n            className=\"space-y-4\"\n          >\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Folder Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter folder name\"\n                      data-testid=\"input-folder-name\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter folder description\"\n                      rows={2}\n                      data-testid=\"input-folder-description\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"hasSecurityCode\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                  <div className=\"space-y-0.5\">\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Lock className=\"w-4 h-4\" />\n                      Security Code Protection\n                    </FormLabel>\n                    <FormDescription>\n                      Require a security code to access this folder\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-security-code\"\n                    />\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n\n            {watchHasSecurityCode && (\n              <FormField\n                control={form.control}\n                name=\"securityCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Security Code</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"password\"\n                        placeholder=\"Enter security code\"\n                        data-testid=\"input-security-code\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Users will need this code to access the folder contents\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n          </form>\n        </Form>\n\n        <DialogFooter>\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setDialogOpen(false)}\n            data-testid=\"button-cancel-folder\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={form.handleSubmit((data) => createFolderMutation.mutate(data))}\n            disabled={createFolderMutation.isPending}\n            data-testid=\"button-save-folder\"\n            className=\"bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n          >\n            {createFolderMutation.isPending ? \"Creating...\" : \"Save Folder\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7805},"client/src/components/folder-document-list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { \n  FileText, \n  Download, \n  Eye, \n  Upload, \n  MoreVertical,\n  Calendar,\n  User,\n  Code,\n  Trash2,\n  Edit3,\n  Share2,\n  Clock\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Document } from \"@shared/schema\";\n\ninterface FolderDocumentListProps {\n  folderId: string;\n}\n\nconst getFileTypeIcon = (fileType: string) => {\n  switch (fileType) {\n    case 'pdf':\n      return '📄';\n    case 'word':\n      return '📝';\n    case 'excel':\n      return '📊';\n    case 'powerpoint':\n      return '📈';\n    default:\n      return '📄';\n  }\n};\n\nconst getCategoryColor = (category: string) => {\n  switch (category) {\n    case 'press_release':\n      return 'bg-blue-100 text-blue-800';\n    case 'memo':\n      return 'bg-green-100 text-green-800';\n    case 'internal_letter':\n      return 'bg-yellow-100 text-yellow-800';\n    case 'external_letter':\n      return 'bg-purple-100 text-purple-800';\n    case 'contract':\n      return 'bg-red-100 text-red-800';\n    case 'follow_up':\n      return 'bg-orange-100 text-orange-800';\n    default:\n      return 'bg-gray-100 text-gray-800';\n  }\n};\n\nexport function FolderDocumentList({ folderId }: FolderDocumentListProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch documents for this folder\n  const { data: documents = [], isLoading } = useQuery<Document[]>({\n    queryKey: [\"/api/folders\", folderId, \"documents\"],\n    queryFn: async ({ queryKey }) => {\n      const url = queryKey.join(\"/\");\n      const res = await fetch(url, { credentials: \"include\" });\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n  });\n\n  // Download document mutation\n  const downloadMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      return response.blob();\n    },\n    onSuccess: (blob, documentId) => {\n      const document = documents.find(d => d.id === documentId);\n      if (document) {\n        const url = window.URL.createObjectURL(blob);\n        const a = window.document.createElement('a');\n        a.href = url;\n        a.download = document.originalName;\n        window.document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        window.document.body.removeChild(a);\n        \n        toast({\n          title: \"Download started\",\n          description: `${document.name} is being downloaded for offline editing`,\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Download failed\",\n        description: \"Unable to download the document\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download PDF mutation\n  const downloadPdfMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}/download/pdf`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"PDF download failed\");\n      return response.blob();\n    },\n    onSuccess: (blob, documentId) => {\n      const document = documents.find(d => d.id === documentId);\n      if (document) {\n        const url = window.URL.createObjectURL(blob);\n        const a = window.document.createElement('a');\n        a.href = url;\n        a.download = `${document.name}.pdf`;\n        window.document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        window.document.body.removeChild(a);\n        \n        toast({\n          title: \"PDF downloaded\",\n          description: `${document.name} PDF has been downloaded`,\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"PDF download failed\",\n        description: \"Unable to generate or download PDF version\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n              </CardContent>\n            </Card>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (documents.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <FileText className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          No documents yet\n        </h3>\n        <p className=\"text-gray-600 mb-4\">\n          Create your first document in this folder to get started\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {documents.map((document) => (\n        <Card key={document.id} className=\"hover:shadow-md transition-shadow\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-center gap-3 flex-1\">\n                <div className=\"text-2xl\">\n                  {getFileTypeIcon(document.fileType)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <CardTitle className=\"text-lg font-semibold line-clamp-1\">\n                    {document.name}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge className={getCategoryColor(document.category)}>\n                      {document.category.replace('_', ' ').toUpperCase()}\n                    </Badge>\n                    {document.documentCode && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <Code className=\"w-3 h-3 mr-1\" />\n                        {document.documentCode}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <MoreVertical className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <Edit3 className=\"w-4 h-4 mr-2\" />\n                    Edit Online\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Share2 className=\"w-4 h-4 mr-2\" />\n                    Share\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem className=\"text-red-600\">\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Delete\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"flex items-center justify-between text-sm text-gray-500 mb-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex items-center gap-1\">\n                  <User className=\"w-3 h-3\" />\n                  <span>Created by {document.uploadedBy}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"w-3 h-3\" />\n                  <span>{new Date(document.createdAt).toLocaleDateString()}</span>\n                </div>\n                {document.updatedAt !== document.createdAt && (\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"w-3 h-3\" />\n                    <span>Modified {new Date(document.updatedAt).toLocaleDateString()}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Three Operation Buttons */}\n            <div className=\"grid grid-cols-3 gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => downloadMutation.mutate(document.id)}\n                disabled={downloadMutation.isPending}\n                className=\"flex items-center gap-2\"\n                data-testid={`button-view-${document.id}`}\n              >\n                <Eye className=\"w-4 h-4\" />\n                View (Download)\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center gap-2\"\n                data-testid={`button-update-${document.id}`}\n              >\n                <Upload className=\"w-4 h-4\" />\n                Update\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => downloadPdfMutation.mutate(document.id)}\n                disabled={downloadPdfMutation.isPending}\n                className=\"flex items-center gap-2\"\n                data-testid={`button-download-pdf-${document.id}`}\n              >\n                <Download className=\"w-4 h-4\" />\n                PDF Only\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}","size_bytes":10034},"client/src/components/folder-security-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Shield, Lock, AlertCircle } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface FolderSecurityModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  folderId: string;\n  folderName: string;\n  onAccessGranted: () => void;\n}\n\nexport function FolderSecurityModal({\n  open,\n  onOpenChange,\n  folderId,\n  folderName,\n  onAccessGranted,\n}: FolderSecurityModalProps) {\n  const [securityCode, setSecurityCode] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const verifyAccessMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", `/api/folders/${folderId}/verify-access`, {\n        securityCode: code,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Access granted\",\n        description: `You now have access to ${folderName}`,\n      });\n      onAccessGranted();\n      onOpenChange(false);\n      setSecurityCode(\"\");\n      setError(\"\");\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Invalid security code\");\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!securityCode.trim()) {\n      setError(\"Please enter the security code\");\n      return;\n    }\n    setError(\"\");\n    verifyAccessMutation.mutate(securityCode.trim());\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5 text-yellow-600\" />\n            Protected Folder\n          </DialogTitle>\n          <DialogDescription>\n            This folder requires a security code to access. Please enter the code to continue.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-yellow-100 rounded-full mb-4\">\n              <Lock className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n            <h3 className=\"font-semibold text-lg\">{folderName}</h3>\n            <p className=\"text-sm text-gray-600\">Enter security code to access this folder</p>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"security-code\">Security Code</Label>\n              <Input\n                id=\"security-code\"\n                type=\"password\"\n                placeholder=\"Enter security code\"\n                value={securityCode}\n                onChange={(e) => setSecurityCode(e.target.value)}\n                className=\"text-center tracking-widest\"\n                data-testid=\"input-security-code\"\n              />\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-access\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={verifyAccessMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-verify-access\"\n              >\n                {verifyAccessMutation.isPending ? \"Verifying...\" : \"Access Folder\"}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4310},"client/src/components/grok-assistant.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Bot, Lightbulb, Search, FileText, Loader2 } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GrokAssistantProps {\n  open?: boolean;\n  onClose?: () => void;\n  onTemplateGenerated?: (template: string) => void;\n  onResearchCompleted?: (research: string) => void;\n  documentType?: string;\n  currentContent?: string;\n}\n\nexport function GrokAssistant({ \n  open,\n  onClose,\n  onTemplateGenerated, \n  onResearchCompleted,\n  documentType = \"\",\n  currentContent = \"\"\n}: GrokAssistantProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"template\");\n  const { toast } = useToast();\n\n  const dialogOpen = open !== undefined ? open : isOpen;\n  const handleOpenChange = onClose || ((open: boolean) => setIsOpen(open));\n\n  // Template Generation\n  const [templateForm, setTemplateForm] = useState({\n    documentType: documentType || \"memo\",\n    title: \"\",\n    fileType: \"word\",\n    recipientName: \"\",\n    recipientAddress: \"\",\n    recipientTitle: \"\",\n    isInternal: true,\n  });\n\n  const templateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-template\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      onTemplateGenerated?.(data.template);\n      toast({\n        title: \"Template generated\",\n        description: \"Your document template has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error generating template\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Research\n  const [researchForm, setResearchForm] = useState({\n    topic: \"\",\n    documentType: documentType || \"memo\",\n    context: \"\",\n  });\n\n  const researchMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/research\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      onResearchCompleted?.(data.research);\n      toast({\n        title: \"Research completed\",\n        description: \"AI research has been completed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error performing research\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Content Improvement\n  const improveMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/improve-content\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      onTemplateGenerated?.(data.improvedContent);\n      toast({\n        title: \"Content improved\",\n        description: \"Your document content has been enhanced.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error improving content\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Dialog open={dialogOpen} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          className=\"gap-2\"\n          data-testid=\"button-grok-assistant\"\n        >\n          <Bot className=\"w-4 h-4\" />\n          AI Assistant\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Bot className=\"w-5 h-5 text-zeolf-primary\" />\n            Grok AI Assistant\n          </DialogTitle>\n          <DialogDescription>\n            Get AI-powered help with document templates, research, and content improvement.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"template\" data-testid=\"tab-template\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Template\n            </TabsTrigger>\n            <TabsTrigger value=\"research\" data-testid=\"tab-research\">\n              <Search className=\"w-4 h-4 mr-2\" />\n              Research\n            </TabsTrigger>\n            <TabsTrigger value=\"improve\" data-testid=\"tab-improve\">\n              <Lightbulb className=\"w-4 h-4 mr-2\" />\n              Improve\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"template\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Generate Document Template</CardTitle>\n                <CardDescription>\n                  Create a professional document template based on your specifications.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Document Type</Label>\n                    <Select \n                      value={templateForm.documentType}\n                      onValueChange={(value) => setTemplateForm(prev => ({...prev, documentType: value}))}\n                    >\n                      <SelectTrigger data-testid=\"select-template-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"press_release\">Press Release</SelectItem>\n                        <SelectItem value=\"memo\">Memo</SelectItem>\n                        <SelectItem value=\"internal_letter\">Internal Letter</SelectItem>\n                        <SelectItem value=\"external_letter\">External Letter</SelectItem>\n                        <SelectItem value=\"contract\">Contract</SelectItem>\n                        <SelectItem value=\"follow_up\">Follow-up</SelectItem>\n                        <SelectItem value=\"report\">Report</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>File Type</Label>\n                    <Select \n                      value={templateForm.fileType}\n                      onValueChange={(value) => setTemplateForm(prev => ({...prev, fileType: value}))}\n                    >\n                      <SelectTrigger data-testid=\"select-template-filetype\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"word\">Word Document</SelectItem>\n                        <SelectItem value=\"excel\">Excel Spreadsheet</SelectItem>\n                        <SelectItem value=\"powerpoint\">PowerPoint Presentation</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Document Title</Label>\n                  <Textarea\n                    placeholder=\"Enter the document title or subject\"\n                    value={templateForm.title}\n                    onChange={(e) => setTemplateForm(prev => ({...prev, title: e.target.value}))}\n                    rows={2}\n                    data-testid=\"input-template-title\"\n                  />\n                </div>\n\n                {(templateForm.documentType.includes(\"letter\") || templateForm.documentType === \"external_letter\") && (\n                  <div className=\"space-y-4 border rounded-lg p-4 bg-gray-50\">\n                    <h4 className=\"font-medium\">Recipient Information</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Recipient Name</Label>\n                        <input\n                          className=\"w-full p-2 border rounded\"\n                          placeholder=\"Full name\"\n                          value={templateForm.recipientName}\n                          onChange={(e) => setTemplateForm(prev => ({...prev, recipientName: e.target.value}))}\n                          data-testid=\"input-recipient-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Title</Label>\n                        <input\n                          className=\"w-full p-2 border rounded\"\n                          placeholder=\"Job title\"\n                          value={templateForm.recipientTitle}\n                          onChange={(e) => setTemplateForm(prev => ({...prev, recipientTitle: e.target.value}))}\n                          data-testid=\"input-recipient-title\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label>Address</Label>\n                      <Textarea\n                        placeholder=\"Full address\"\n                        value={templateForm.recipientAddress}\n                        onChange={(e) => setTemplateForm(prev => ({...prev, recipientAddress: e.target.value}))}\n                        rows={3}\n                        data-testid=\"input-recipient-address\"\n                      />\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={() => templateMutation.mutate(templateForm)}\n                  disabled={templateMutation.isPending || !templateForm.title}\n                  className=\"w-full bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n                  data-testid=\"button-generate-template\"\n                >\n                  {templateMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating Template...\n                    </>\n                  ) : (\n                    \"Generate Template\"\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"research\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>AI Research Assistant</CardTitle>\n                <CardDescription>\n                  Get comprehensive research information for your document.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Research Topic</Label>\n                  <Textarea\n                    placeholder=\"What do you want to research? Be specific about the topic or question.\"\n                    value={researchForm.topic}\n                    onChange={(e) => setResearchForm(prev => ({...prev, topic: e.target.value}))}\n                    rows={3}\n                    data-testid=\"input-research-topic\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Document Type</Label>\n                  <Select \n                    value={researchForm.documentType}\n                    onValueChange={(value) => setResearchForm(prev => ({...prev, documentType: value}))}\n                  >\n                    <SelectTrigger data-testid=\"select-research-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"press_release\">Press Release</SelectItem>\n                      <SelectItem value=\"memo\">Memo</SelectItem>\n                      <SelectItem value=\"internal_letter\">Internal Letter</SelectItem>\n                      <SelectItem value=\"external_letter\">External Letter</SelectItem>\n                      <SelectItem value=\"contract\">Contract</SelectItem>\n                      <SelectItem value=\"follow_up\">Follow-up</SelectItem>\n                      <SelectItem value=\"report\">Report</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Additional Context (Optional)</Label>\n                  <Textarea\n                    placeholder=\"Provide any additional context or specific requirements for the research\"\n                    value={researchForm.context}\n                    onChange={(e) => setResearchForm(prev => ({...prev, context: e.target.value}))}\n                    rows={3}\n                    data-testid=\"input-research-context\"\n                  />\n                </div>\n\n                <Button\n                  onClick={() => researchMutation.mutate(researchForm)}\n                  disabled={researchMutation.isPending || !researchForm.topic}\n                  className=\"w-full bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n                  data-testid=\"button-start-research\"\n                >\n                  {researchMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Researching...\n                    </>\n                  ) : (\n                    \"Start Research\"\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"improve\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Improve Document Content</CardTitle>\n                <CardDescription>\n                  Enhance your existing document with AI-powered improvements.\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Current Content</Label>\n                  <Textarea\n                    placeholder=\"Paste your document content here to improve it\"\n                    value={currentContent}\n                    rows={8}\n                    data-testid=\"input-improve-content\"\n                    readOnly={!!currentContent}\n                  />\n                </div>\n\n                <Button\n                  onClick={() => improveMutation.mutate({ \n                    content: currentContent, \n                    documentType: documentType || \"memo\" \n                  })}\n                  disabled={improveMutation.isPending || !currentContent}\n                  className=\"w-full bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n                  data-testid=\"button-improve-content\"\n                >\n                  {improveMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Improving Content...\n                    </>\n                  ) : (\n                    \"Improve Content\"\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15653},"client/src/components/upload-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { CloudUpload, X, Upload, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UploadModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst categories = [\n  { value: \"press_releases\", label: \"Press Releases\" },\n  { value: \"memos\", label: \"Memos\" },\n  { value: \"internal_letters\", label: \"Internal Letters\" },\n  { value: \"contracts\", label: \"Contracts\" },\n  { value: \"follow_ups\", label: \"Follow-ups\" },\n];\n\nexport function UploadModal({ open, onOpenChange }: UploadModalProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [category, setCategory] = useState(\"\");\n  const [customName, setCustomName] = useState(\"\");\n  const [addHeader, setAddHeader] = useState(true);\n  const [dragActive, setDragActive] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/documents/upload', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Upload successful\",\n        description: \"Document has been uploaded successfully\",\n      });\n      \n      // Reset form\n      setFile(null);\n      setCategory(\"\");\n      setCustomName(\"\");\n      setAddHeader(true);\n      \n      // Close modal\n      onOpenChange(false);\n      \n      // Invalidate queries to refresh document list\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/documents/stats\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (selectedFile: File | null) => {\n    if (selectedFile) {\n      // Validate file type\n      const allowedTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-powerpoint',\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      ];\n\n      if (!allowedTypes.includes(selectedFile.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Only PDF, Word, Excel, and PowerPoint files are allowed\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Validate file size (50MB limit)\n      if (selectedFile.size > 50 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"File size must be less than 50MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setFile(selectedFile);\n      if (!customName) {\n        setCustomName(selectedFile.name.replace(/\\.[^/.]+$/, \"\")); // Remove extension\n      }\n    }\n  };\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFileSelect(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!file || !category) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please select a file and category\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('category', category);\n    if (customName) {\n      formData.append('name', customName);\n    }\n    formData.append('addHeader', addHeader.toString());\n\n    uploadMutation.mutate(formData);\n  };\n\n  const handleClose = () => {\n    if (!uploadMutation.isPending) {\n      setFile(null);\n      setCategory(\"\");\n      setCustomName(\"\");\n      setAddHeader(true);\n      onOpenChange(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-lg\" data-testid=\"upload-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Upload Document\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              disabled={uploadMutation.isPending}\n              data-testid=\"button-close-upload\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n          <DialogDescription>\n            Upload a file to add it to your document collection. Supported formats: PDF, Word, Excel, PowerPoint.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Upload Area */}\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n              dragActive\n                ? \"border-zeolf-blue bg-zeolf-blue/5\"\n                : \"border-gray-300 hover:border-zeolf-blue\"\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n            data-testid=\"upload-drop-zone\"\n          >\n            <CloudUpload className=\"w-12 h-12 text-zeolf-text-secondary mx-auto mb-4\" />\n            \n            {file ? (\n              <div className=\"space-y-2\">\n                <p className=\"text-zeolf-text font-medium\">{file.name}</p>\n                <p className=\"text-sm text-zeolf-text-secondary\">\n                  {(file.size / 1024 / 1024).toFixed(2)} MB\n                </p>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFile(null)}\n                  data-testid=\"button-remove-file\"\n                >\n                  Remove\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                <p className=\"text-zeolf-text mb-2\">Drag and drop files here</p>\n                <p className=\"text-sm text-zeolf-text-secondary mb-4\">or</p>\n                <Button\n                  type=\"button\"\n                  className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                  onClick={() => document.getElementById('file-input')?.click()}\n                  data-testid=\"button-browse-files\"\n                >\n                  Browse Files\n                </Button>\n                <p className=\"text-xs text-zeolf-text-secondary\">\n                  Supports PDF, Word, Excel, PowerPoint (max 50MB)\n                </p>\n              </div>\n            )}\n            \n            <input\n              id=\"file-input\"\n              type=\"file\"\n              className=\"hidden\"\n              accept=\".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx\"\n              onChange={(e) => handleFileSelect(e.target.files?.[0] || null)}\n              data-testid=\"input-file\"\n            />\n          </div>\n\n          {/* Document Details */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"category\" className=\"text-zeolf-text\">Category *</Label>\n              <Select value={category} onValueChange={setCategory} required>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select category...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {categories.map((cat) => (\n                    <SelectItem key={cat.value} value={cat.value}>\n                      {cat.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"customName\" className=\"text-zeolf-text\">Document Name</Label>\n              <Input\n                id=\"customName\"\n                value={customName}\n                onChange={(e) => setCustomName(e.target.value)}\n                placeholder=\"Auto-generated based on content\"\n                data-testid=\"input-document-name\"\n              />\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"autoHeader\"\n                checked={addHeader}\n                onCheckedChange={(checked) => setAddHeader(checked === true)}\n                data-testid=\"checkbox-auto-header\"\n              />\n              <Label htmlFor=\"autoHeader\" className=\"text-sm text-zeolf-text\">\n                Add ZEOLF company header automatically\n              </Label>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={uploadMutation.isPending}\n              data-testid=\"button-cancel-upload\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n              disabled={!file || !category || uploadMutation.isPending}\n              data-testid=\"button-submit-upload\"\n            >\n              {uploadMutation.isPending ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Upload\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10810},"client/src/components/video-conference.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Mic, \n  MicOff, \n  Video as VideoIcon, \n  VideoOff, \n  Monitor, \n  MessageSquare, \n  Phone,\n  PhoneOff,\n  X,\n  Users,\n  Copy,\n  Shield\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface VideoConferenceProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ninterface Participant {\n  id: string;\n  name: string;\n  initials: string;\n  isHost: boolean;\n  micEnabled: boolean;\n  videoEnabled: boolean;\n  color: string;\n}\n\nexport function VideoConference({ open, onOpenChange }: VideoConferenceProps) {\n  const [duration, setDuration] = useState(0);\n  const [isRecording] = useState(true);\n  const [localMicEnabled, setLocalMicEnabled] = useState(true);\n  const [localVideoEnabled, setLocalVideoEnabled] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const { toast } = useToast();\n\n  // Mock participants data\n  const [participants] = useState<Participant[]>([\n    { id: '1', name: 'John Doe', initials: 'JD', isHost: true, micEnabled: true, videoEnabled: true, color: 'bg-zeolf-blue' },\n    { id: '2', name: 'Sarah Miller', initials: 'SM', isHost: false, micEnabled: true, videoEnabled: false, color: 'bg-zeolf-accent' },\n    { id: '3', name: 'Robert Johnson', initials: 'RJ', isHost: false, micEnabled: false, videoEnabled: true, color: 'bg-zeolf-success' },\n    { id: '4', name: 'Lisa Wang', initials: 'LW', isHost: false, micEnabled: true, videoEnabled: true, color: 'bg-zeolf-warning' },\n  ]);\n\n  const meetingId = \"123-456-789\";\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (open) {\n      interval = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [open]);\n\n  // Reset timer when modal closes\n  useEffect(() => {\n    if (!open) {\n      setDuration(0);\n    }\n  }, [open]);\n\n  const formatDuration = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const handleToggleMic = () => {\n    setLocalMicEnabled(!localMicEnabled);\n    toast({\n      title: localMicEnabled ? \"Microphone muted\" : \"Microphone unmuted\",\n    });\n  };\n\n  const handleToggleVideo = () => {\n    setLocalVideoEnabled(!localVideoEnabled);\n    toast({\n      title: localVideoEnabled ? \"Camera turned off\" : \"Camera turned on\",\n    });\n  };\n\n  const handleToggleScreenShare = () => {\n    setIsScreenSharing(!isScreenSharing);\n    toast({\n      title: isScreenSharing ? \"Screen sharing stopped\" : \"Screen sharing started\",\n    });\n  };\n\n  const handleCopyMeetingLink = () => {\n    const meetingLink = `https://zeolf-dms.com/meeting/${meetingId}`;\n    navigator.clipboard.writeText(meetingLink);\n    toast({\n      title: \"Meeting link copied\",\n      description: \"Share this link with other participants\",\n    });\n  };\n\n  const handleEndCall = () => {\n    onOpenChange(false);\n    toast({\n      title: \"Meeting ended\",\n      description: \"You have left the meeting\",\n    });\n  };\n\n  if (!open) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-full max-h-full w-screen h-screen p-0 bg-black\">\n        <DialogHeader className=\"sr-only\">\n          <DialogTitle>ZEOLF Team Video Conference</DialogTitle>\n          <DialogDescription>\n            Full-screen video conference meeting with screen sharing, chat, and recording capabilities.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex flex-col h-full\" data-testid=\"video-conference\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 bg-black/50 text-white\">\n            <div className=\"flex items-center space-x-4\">\n              <h3 className=\"font-medium\">ZEOLF Team Meeting</h3>\n              <span className=\"text-sm text-gray-300\">{formatDuration(duration)}</span>\n              {isRecording && (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm\">Recording</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-white hover:text-gray-300\"\n                data-testid=\"button-participants\"\n              >\n                <Users className=\"w-4 h-4 mr-2\" />\n                <span>{participants.length} participants</span>\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onOpenChange(false)}\n                className=\"text-white hover:text-gray-300\"\n                data-testid=\"button-close-meeting\"\n              >\n                <X className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Video Grid */}\n          <div className=\"flex-1 p-4\">\n            <div className=\"grid grid-cols-2 lg:grid-cols-2 gap-4 h-full\">\n              {participants.map((participant, index) => (\n                <div \n                  key={participant.id} \n                  className=\"relative bg-gray-900 rounded-lg overflow-hidden\"\n                  data-testid={`participant-${participant.id}`}\n                >\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center text-white\">\n                      <div className={`w-${index === 0 ? '20' : '16'} h-${index === 0 ? '20' : '16'} ${participant.color} rounded-full flex items-center justify-center mx-auto mb-${index === 0 ? '4' : '3'}`}>\n                        <span className={`${index === 0 ? 'text-2xl' : 'text-lg'} font-medium`}>\n                          {participant.initials}\n                        </span>\n                      </div>\n                      <p className=\"font-medium\">{participant.name}</p>\n                      {participant.isHost && (\n                        <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                          Host\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Participant Controls Indicator */}\n                  <div className=\"absolute bottom-4 left-4 flex items-center space-x-2\">\n                    {participant.micEnabled ? (\n                      <Mic className=\"w-4 h-4 text-white\" />\n                    ) : (\n                      <MicOff className=\"w-4 h-4 text-red-500\" />\n                    )}\n                    {participant.videoEnabled ? (\n                      <VideoIcon className=\"w-4 h-4 text-white\" />\n                    ) : (\n                      <VideoOff className=\"w-4 h-4 text-red-500\" />\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"bg-black/50 p-4\">\n            <div className=\"flex items-center justify-center space-x-6 mb-4\">\n              <Button\n                variant={localMicEnabled ? \"secondary\" : \"destructive\"}\n                size=\"lg\"\n                className=\"w-12 h-12 rounded-full\"\n                onClick={handleToggleMic}\n                data-testid=\"button-toggle-mic\"\n              >\n                {localMicEnabled ? <Mic className=\"w-5 h-5\" /> : <MicOff className=\"w-5 h-5\" />}\n              </Button>\n\n              <Button\n                variant={localVideoEnabled ? \"secondary\" : \"destructive\"}\n                size=\"lg\"\n                className=\"w-12 h-12 rounded-full\"\n                onClick={handleToggleVideo}\n                data-testid=\"button-toggle-video\"\n              >\n                {localVideoEnabled ? <VideoIcon className=\"w-5 h-5\" /> : <VideoOff className=\"w-5 h-5\" />}\n              </Button>\n\n              <Button\n                variant={isScreenSharing ? \"default\" : \"secondary\"}\n                size=\"lg\"\n                className=\"w-12 h-12 rounded-full bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                onClick={handleToggleScreenShare}\n                data-testid=\"button-screen-share\"\n              >\n                <Monitor className=\"w-5 h-5\" />\n              </Button>\n\n              <Button\n                variant=\"secondary\"\n                size=\"lg\"\n                className=\"w-12 h-12 rounded-full\"\n                data-testid=\"button-chat\"\n              >\n                <MessageSquare className=\"w-5 h-5\" />\n              </Button>\n\n              <Button\n                variant=\"destructive\"\n                size=\"lg\"\n                className=\"w-12 h-12 rounded-full\"\n                onClick={handleEndCall}\n                data-testid=\"button-end-call\"\n              >\n                <PhoneOff className=\"w-5 h-5\" />\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between text-white text-sm\">\n              <div className=\"flex items-center space-x-4\">\n                <span>Meeting ID: {meetingId}</span>\n                <Button\n                  variant=\"link\"\n                  size=\"sm\"\n                  className=\"text-zeolf-accent hover:text-blue-300 p-0 h-auto\"\n                  onClick={handleCopyMeetingLink}\n                  data-testid=\"button-copy-link\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy Link\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-2 text-gray-300\">\n                <Shield className=\"w-4 h-4\" />\n                <span>End-to-end encrypted</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10298},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, RegisterData>;\n};\n\ntype LoginData = {\n  loginCode: string;\n};\n\ntype RegisterData = {\n  name: string;\n  role?: string;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (newUser: SelectUser) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User created successfully\",\n        description: `Login code: ${newUser.loginCode}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"User creation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      queryClient.clear();\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3282},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-zeolf-bg\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-zeolf-blue\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      <Component />\n    </Route>\n  );\n}\n","size_bytes":741},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, Loader2 } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const [loginCode, setLoginCode] = useState(\"\");\n  const [newUserName, setNewUserName] = useState(\"\");\n  const [newUserRole, setNewUserRole] = useState(\"user\");\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginCode.trim()) return;\n    \n    loginMutation.mutate({ loginCode: loginCode.trim() });\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newUserName.trim()) return;\n    \n    registerMutation.mutate({\n      name: newUserName.trim(),\n      role: newUserRole,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-zeolf-blue to-zeolf-blue-dark flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid lg:grid-cols-2 gap-8 items-center\">\n        \n        {/* Hero Section */}\n        <div className=\"text-center lg:text-left text-white space-y-6\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-white/20 rounded-full mb-6\">\n            <FileText className=\"w-10 h-10\" />\n          </div>\n          \n          <h1 className=\"text-4xl lg:text-6xl font-bold mb-4\">\n            ZEOLF\n          </h1>\n          \n          <h2 className=\"text-xl lg:text-2xl font-semibold mb-4\">\n            Document Management System\n          </h2>\n          \n          <p className=\"text-lg text-white/90 max-w-lg\">\n            Secure document organization, collaborative editing, and integrated \n            video conferencing for company members. Professional document management \n            inspired by SharePoint and Google Workspace.\n          </p>\n          \n          <div className=\"grid grid-cols-2 gap-4 max-w-md mx-auto lg:mx-0 text-sm\">\n            <div className=\"bg-white/10 p-3 rounded-lg\">\n              <div className=\"font-semibold\">Secure Storage</div>\n              <div className=\"text-white/80\">Enterprise-grade security</div>\n            </div>\n            <div className=\"bg-white/10 p-3 rounded-lg\">\n              <div className=\"font-semibold\">Collaboration</div>\n              <div className=\"text-white/80\">Team document sharing</div>\n            </div>\n            <div className=\"bg-white/10 p-3 rounded-lg\">\n              <div className=\"font-semibold\">Video Meetings</div>\n              <div className=\"text-white/80\">Integrated conferencing</div>\n            </div>\n            <div className=\"bg-white/10 p-3 rounded-lg\">\n              <div className=\"font-semibold\">Activity Tracking</div>\n              <div className=\"text-white/80\">Comprehensive logging</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Auth Forms */}\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader>\n            <CardTitle className=\"text-zeolf-text\">Access ZEOLF DMS</CardTitle>\n            <CardDescription>\n              Enter your login code to access the document management system\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Create User</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"loginCode\" className=\"text-zeolf-text\">Login Code</Label>\n                    <Input\n                      id=\"loginCode\"\n                      data-testid=\"input-login-code\"\n                      type=\"text\"\n                      placeholder=\"ZT-ABC-123\"\n                      value={loginCode}\n                      onChange={(e) => setLoginCode(e.target.value)}\n                      className=\"focus:ring-zeolf-blue focus:border-zeolf-blue\"\n                      disabled={loginMutation.isPending}\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                    disabled={loginMutation.isPending || !loginCode.trim()}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      \"Sign In\"\n                    )}\n                  </Button>\n                </form>\n                \n                <p className=\"text-sm text-zeolf-text-secondary text-center\">\n                  Contact your administrator for access codes\n                </p>\n              </TabsContent>\n              \n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newUserName\" className=\"text-zeolf-text\">Full Name</Label>\n                    <Input\n                      id=\"newUserName\"\n                      data-testid=\"input-new-user-name\"\n                      type=\"text\"\n                      placeholder=\"John Doe\"\n                      value={newUserName}\n                      onChange={(e) => setNewUserName(e.target.value)}\n                      className=\"focus:ring-zeolf-blue focus:border-zeolf-blue\"\n                      disabled={registerMutation.isPending}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newUserRole\" className=\"text-zeolf-text\">Role</Label>\n                    <select\n                      id=\"newUserRole\"\n                      data-testid=\"select-user-role\"\n                      value={newUserRole}\n                      onChange={(e) => setNewUserRole(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-zeolf-blue focus:border-transparent outline-none\"\n                      disabled={registerMutation.isPending}\n                    >\n                      <option value=\"user\">User</option>\n                      <option value=\"super_admin\">Super Admin</option>\n                    </select>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                    disabled={registerMutation.isPending || !newUserName.trim()}\n                    data-testid=\"button-register\"\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Creating User...\n                      </>\n                    ) : (\n                      \"Generate Login Code\"\n                    )}\n                  </Button>\n                </form>\n                \n                <p className=\"text-sm text-zeolf-text-secondary text-center\">\n                  Only super admins can create new user accounts\n                </p>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8255},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Search, \n  Upload, \n  Video, \n  ChevronDown, \n  Grid3X3, \n  List, \n  FileText,\n  Folder,\n  Star,\n  Clock,\n  Share,\n  Newspaper,\n  FileCheck,\n  Mail,\n  File,\n  Reply,\n  Users,\n  BarChart3,\n  MoreHorizontal,\n  Settings,\n  Download,\n  Eye,\n  Edit\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { FileLibrary } from \"@/components/file-library\";\n\nconst categoryIcons = {\n  press_releases: { icon: Newspaper, color: \"text-zeolf-accent\", bgColor: \"bg-zeolf-accent/10\" },\n  memos: { icon: FileCheck, color: \"text-zeolf-warning\", bgColor: \"bg-zeolf-warning/10\" },\n  internal_letters: { icon: Mail, color: \"text-zeolf-success\", bgColor: \"bg-zeolf-success/10\" },\n  contracts: { icon: File, color: \"text-zeolf-error\", bgColor: \"bg-zeolf-error/10\" },\n  follow_ups: { icon: Reply, color: \"text-zeolf-blue\", bgColor: \"bg-zeolf-blue/10\" },\n};\n\nconst categoryLabels = {\n  press_releases: \"Press Releases\",\n  memos: \"Memos\",\n  internal_letters: \"Internal Letters\",\n  contracts: \"Contracts\",\n  follow_ups: \"Follow-ups\",\n};\n\nexport default function Dashboard() {\n  const { user, logoutMutation } = useAuth();\n  const [location, setLocation] = useLocation();\n\n\n\n\n\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen bg-zeolf-bg\">\n      {/* Top Navigation */}\n      <nav className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-zeolf-blue rounded flex items-center justify-center\">\n                <FileText className=\"w-4 h-4 text-white\" />\n              </div>\n              <h1 className=\"text-xl font-semibold text-zeolf-text\">ZEOLF DMS</h1>\n            </div>\n            \n            <nav className=\"flex items-center space-x-2 text-sm\">\n              <span className=\"text-zeolf-text-secondary\">Documents</span>\n              <div className=\"w-1 h-1 bg-gray-400 rounded-full\" />\n              <span className=\"text-zeolf-blue\">Company Files</span>\n            </nav>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n\n            \n\n            \n            {/* User Menu */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-zeolf-blue rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-sm font-medium\">\n                  {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </span>\n              </div>\n              <span className=\"text-zeolf-text font-medium\">{user.name}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className=\"w-72 bg-white border-r border-gray-200 min-h-screen\">\n          <div className=\"p-6\">\n            {/* Quick Actions */}\n            <div className=\"mb-6 space-y-3\">\n\n            </div>\n            \n            {/* Navigation Menu */}\n            <nav className=\"space-y-2 mb-8\">\n              <Button\n                variant=\"secondary\"\n                className=\"w-full justify-start\"\n                data-testid=\"nav-all-documents\"\n              >\n                <FileText className=\"w-4 h-4 mr-3\" />\n                All Documents\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"nav-folders\">\n                <Folder className=\"w-4 h-4 mr-3\" />\n                Folders\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"nav-starred\">\n                <Star className=\"w-4 h-4 mr-3\" />\n                Starred\n              </Button>\n              <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"nav-recent\">\n                <Clock className=\"w-4 h-4 mr-3\" />\n                Recent\n              </Button>\n              <Link href=\"/shared\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"nav-shared\">\n                  <Share className=\"w-4 h-4 mr-3\" />\n                  Shared with me\n                </Button>\n              </Link>\n            </nav>\n            \n            {/* Document Categories */}\n            <div className=\"mb-8\">\n              <h3 className=\"text-sm font-medium text-zeolf-text-secondary mb-3\">Categories</h3>\n              <nav className=\"space-y-1\">\n                {Object.entries(categoryIcons).map(([category, { icon: Icon, color, bgColor }]) => (\n                  <Button\n                    key={category}\n                    variant=\"ghost\"\n                    className=\"w-full justify-between text-sm p-3\"\n                    data-testid={`nav-category-${category}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Icon className={`w-4 h-4 ${color}`} />\n                      <span>{categoryLabels[category as keyof typeof categoryLabels]}</span>\n                    </div>\n                    <span className=\"text-xs text-zeolf-text-secondary\">\n                      0\n                    </span>\n                  </Button>\n                ))}\n              </nav>\n            </div>\n            \n            {/* Admin Section (Super Admin Only) */}\n            {user.role === \"super_admin\" && (\n              <div>\n                <h3 className=\"text-sm font-medium text-zeolf-text-secondary mb-3\">Administration</h3>\n                <nav className=\"space-y-1\">\n                  <Link href=\"/admin/users\">\n                    <Button variant=\"ghost\" className=\"w-full justify-start text-sm\" data-testid=\"nav-user-management\">\n                      <Users className=\"w-4 h-4 mr-3\" />\n                      User Management\n                    </Button>\n                  </Link>\n                  <Link href=\"/admin/activity\">\n                    <Button variant=\"ghost\" className=\"w-full justify-start text-sm\" data-testid=\"nav-activity-logs\">\n                      <BarChart3 className=\"w-4 h-4 mr-3\" />\n                      Activity Logs\n                    </Button>\n                  </Link>\n                </nav>\n              </div>\n            )}\n          </div>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n\n            \n            {/* File Library - Folder-based Document Management */}\n            <FileLibrary />\n          </div>\n        </main>\n      </div>\n\n\n      \n\n\n\n    </div>\n  );\n}\n","size_bytes":7422},"client/src/pages/document-editor.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { DocumentEditor } from \"@/components/document-editor\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function DocumentEditorPage() {\n  const { id } = useParams<{ id: string }>();\n  const [, navigate] = useLocation();\n\n  if (!id) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen\">\n        <h1 className=\"text-2xl font-bold mb-4\">Document Not Found</h1>\n        <Button onClick={() => navigate(\"/\")} data-testid=\"button-back-home\">\n          Go Back Home\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n        <div className=\"container flex h-14 items-center\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => navigate(\"/\")}\n            className=\"mr-4\"\n            data-testid=\"button-back-dashboard\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n        </div>\n      </div>\n      \n      <DocumentEditor documentId={id} />\n    </div>\n  );\n}","size_bytes":1295},"client/src/pages/document-viewer.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  ArrowLeft, \n  Download, \n  Share, \n  Edit, \n  FileText,\n  File,\n  FileSpreadsheet,\n  Presentation\n} from \"lucide-react\";\nimport { Document } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nconst fileTypeIcons = {\n  pdf: { icon: FileText, color: \"text-red-600\", bgColor: \"bg-red-100\" },\n  word: { icon: FileText, color: \"text-blue-600\", bgColor: \"bg-blue-100\" },\n  excel: { icon: FileSpreadsheet, color: \"text-green-600\", bgColor: \"bg-green-100\" },\n  powerpoint: { icon: Presentation, color: \"text-orange-600\", bgColor: \"bg-orange-100\" },\n  unknown: { icon: File, color: \"text-gray-600\", bgColor: \"bg-gray-100\" },\n};\n\nexport default function DocumentViewer() {\n  const params = useParams();\n  const [location, setLocation] = useLocation();\n  const documentId = params.id;\n\n  const { data: document, isLoading } = useQuery<Document>({\n    queryKey: [\"/api/documents\", documentId],\n    enabled: !!documentId,\n  });\n\n  const handleBack = () => {\n    setLocation(\"/\");\n  };\n\n  const handleDownload = () => {\n    if (document) {\n      window.open(`/api/documents/${document.id}/download`);\n    }\n  };\n\n  const handleShare = () => {\n    // TODO: Implement share functionality\n    console.log(\"Share document\");\n  };\n\n  const handleEdit = () => {\n    // TODO: Implement edit functionality\n    console.log(\"Edit document\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-zeolf-bg\">\n        <div className=\"bg-white border-b border-gray-200 p-4\">\n          <Skeleton className=\"h-6 w-64\" />\n        </div>\n        <div className=\"p-6\">\n          <div className=\"max-w-4xl mx-auto bg-white rounded-lg p-8\">\n            <Skeleton className=\"h-8 w-3/4 mb-4\" />\n            <Skeleton className=\"h-4 w-full mb-2\" />\n            <Skeleton className=\"h-4 w-5/6 mb-2\" />\n            <Skeleton className=\"h-4 w-4/5\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!document) {\n    return (\n      <div className=\"min-h-screen bg-zeolf-bg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <FileText className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-zeolf-text mb-2\">Document not found</h2>\n          <p className=\"text-zeolf-text-secondary mb-6\">\n            The document you're looking for doesn't exist or you don't have access to it.\n          </p>\n          <Button onClick={handleBack} className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Documents\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const fileTypeConfig = fileTypeIcons[document.fileType as keyof typeof fileTypeIcons] || fileTypeIcons.unknown;\n  const Icon = fileTypeConfig.icon;\n\n  return (\n    <div className=\"min-h-screen bg-zeolf-bg\" data-testid=\"document-viewer\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBack}\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back\n            </Button>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className={`w-8 h-8 ${fileTypeConfig.bgColor} rounded flex items-center justify-center`}>\n                <Icon className={`w-4 h-4 ${fileTypeConfig.color}`} />\n              </div>\n              <div>\n                <h1 className=\"font-medium text-zeolf-text\" data-testid=\"document-title\">\n                  {document.name}\n                </h1>\n                <p className=\"text-sm text-zeolf-text-secondary\">\n                  {(document.fileSize / 1024 / 1024).toFixed(2)} MB • \n                  Last modified {format(new Date(document.updatedAt), \"PPP 'at' p\")}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleDownload}\n              data-testid=\"button-download\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Download\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleShare}\n              data-testid=\"button-share\"\n            >\n              <Share className=\"w-4 h-4 mr-2\" />\n              Share\n            </Button>\n            <Button\n              className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n              size=\"sm\"\n              onClick={handleEdit}\n              data-testid=\"button-edit\"\n            >\n              <Edit className=\"w-4 h-4 mr-2\" />\n              Edit\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Document Content */}\n      <div className=\"p-6\">\n        <div className=\"max-w-4xl mx-auto bg-white shadow-lg rounded-lg overflow-hidden\">\n          {/* ZEOLF Company Header */}\n          <div className=\"border-b-2 border-zeolf-blue p-8 bg-gradient-to-r from-zeolf-blue/5 to-zeolf-accent/5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-zeolf-blue mb-2\">ZEOLF TECHNOLOGY</h1>\n                <p className=\"text-zeolf-text-secondary\">Document Management Solutions</p>\n              </div>\n              <div className=\"text-right text-sm text-zeolf-text-secondary\">\n                <p>Created: {format(new Date(document.createdAt), \"PPP\")}</p>\n                <p>Doc #: ZT-{document.category.toUpperCase()}-{document.id.substr(0, 8)}</p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Document Body */}\n          <div className=\"p-8\">\n            <div className=\"mb-6\">\n              <Badge variant=\"secondary\" className=\"mb-4\">\n                {document.category.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n              </Badge>\n              <h2 className=\"text-2xl font-semibold text-zeolf-text mb-4\">\n                {document.name}\n              </h2>\n            </div>\n            \n            {/* Document Preview Placeholder */}\n            <div className=\"bg-gray-50 rounded-lg p-8 text-center min-h-96 flex items-center justify-center\">\n              <div>\n                <Icon className={`w-20 h-20 ${fileTypeConfig.color} mx-auto mb-4`} />\n                <h3 className=\"text-lg font-medium text-zeolf-text mb-2\">Document Preview</h3>\n                <p className=\"text-zeolf-text-secondary mb-6\">\n                  Click download to view the full document content\n                </p>\n                <Button\n                  onClick={handleDownload}\n                  className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                  data-testid=\"button-download-preview\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download {document.originalName}\n                </Button>\n              </div>\n            </div>\n            \n            {/* Document Footer */}\n            <div className=\"mt-8 pt-6 border-t border-gray-200\">\n              <p className=\"text-sm text-zeolf-text-secondary text-center\">\n                This document is confidential and proprietary to ZEOLF Technology. \n                Distribution is restricted to authorized personnel only.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7916},"client/src/pages/folder-page-new.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ArrowLeft, \n  Plus,\n  Lock,\n  Unlock,\n  Bot,\n  FileText,\n  Settings\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DocumentCreator } from \"@/components/document-creator\";\nimport { GrokAssistant } from \"@/components/grok-assistant\";\nimport { FolderDocumentList } from \"@/components/folder-document-list\";\nimport { FolderSecurityModal } from \"@/components/folder-security-modal\";\nimport type { Folder } from \"@shared/schema\";\n\nexport default function FolderPage() {\n  const { folderId } = useParams<{ folderId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [isAccessVerified, setIsAccessVerified] = useState(false);\n  const [showSecurityModal, setShowSecurityModal] = useState(false);\n  const [showDocumentCreator, setShowDocumentCreator] = useState(false);\n  const [showGrokAssistant, setShowGrokAssistant] = useState(false);\n\n  // Fetch folder details\n  const { data: folder, isLoading: folderLoading } = useQuery<Folder>({\n    queryKey: [\"/api/folders\", folderId],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n    enabled: !!folderId,\n  });\n\n  // Check folder access on mount\n  useEffect(() => {\n    if (folder) {\n      if (!folder.hasSecurityCode) {\n        setIsAccessVerified(true);\n      } else {\n        setShowSecurityModal(true);\n      }\n    }\n  }, [folder]);\n\n  const handleAccessGranted = () => {\n    setIsAccessVerified(true);\n    setShowSecurityModal(false);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Authentication Required</h1>\n          <p className=\"text-gray-600\">Please log in to access folders.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (folderLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!folder) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Folder not found</h1>\n          <p className=\"text-gray-600 mb-4\">The folder you're looking for doesn't exist or you don't have access to it.</p>\n          <Link href=\"/dashboard\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-sm border mb-6 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-dashboard\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  {folder.hasSecurityCode ? (\n                    <Lock className=\"w-8 h-8 text-yellow-600\" />\n                  ) : (\n                    <Unlock className=\"w-8 h-8 text-green-600\" />\n                  )}\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-zeolf-text-primary\">{folder.name}</h1>\n                  {folder.description && (\n                    <p className=\"text-zeolf-text-secondary\">{folder.description}</p>\n                  )}\n                </div>\n              </div>\n              {folder.hasSecurityCode && (\n                <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-200\">\n                  <Lock className=\"w-3 h-3 mr-1\" />\n                  Protected\n                </Badge>\n              )}\n            </div>\n            \n            {/* Action Buttons */}\n            {isAccessVerified && (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  onClick={() => setShowGrokAssistant(true)}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-grok-assistant\"\n                >\n                  <Bot className=\"w-4 h-4\" />\n                  AI Assistant\n                </Button>\n                <Button\n                  onClick={() => setShowDocumentCreator(true)}\n                  className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                  data-testid=\"button-create-document\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Document\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {/* Folder Stats */}\n          <div className=\"flex items-center gap-6 mt-4 pt-4 border-t text-sm text-gray-500\">\n            <span>Created {new Date(folder.createdAt).toLocaleDateString()}</span>\n            <span>•</span>\n            <span>Last updated {new Date(folder.updatedAt).toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        {isAccessVerified ? (\n          <div className=\"space-y-6\">\n            {/* Document List */}\n            <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-zeolf-text-primary\">Documents</h2>\n                  <p className=\"text-zeolf-text-secondary\">\n                    Manage documents in this folder\n                  </p>\n                </div>\n              </div>\n              \n              <FolderDocumentList folderId={folderId!} />\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-white rounded-lg shadow-sm border p-12 text-center\">\n            <Lock className=\"w-16 h-16 mx-auto text-yellow-600 mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Folder Access Required\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              This folder is protected. Please enter the security code to access its contents.\n            </p>\n            <Button\n              onClick={() => setShowSecurityModal(true)}\n              className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n              data-testid=\"button-enter-security-code\"\n            >\n              Enter Security Code\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      <FolderSecurityModal\n        open={showSecurityModal}\n        onOpenChange={setShowSecurityModal}\n        folderId={folderId!}\n        folderName={folder.name}\n        onAccessGranted={handleAccessGranted}\n      />\n\n      <DocumentCreator\n        open={showDocumentCreator}\n        onClose={() => setShowDocumentCreator(false)}\n        folderId={folderId}\n        onSuccess={() => {\n          setShowDocumentCreator(false);\n          toast({\n            title: \"Document created\",\n            description: \"Your document has been created successfully\",\n          });\n        }}\n      />\n\n      <GrokAssistant\n        open={showGrokAssistant}\n        onClose={() => setShowGrokAssistant(false)}\n        documentType=\"\"\n        currentContent=\"\"\n      />\n    </div>\n  );\n}","size_bytes":8306},"client/src/pages/folder-page-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ArrowLeft, \n  Plus,\n  Lock,\n  Unlock,\n  Bot\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DocumentCreator } from \"@/components/document-creator\";\nimport { GrokAssistant } from \"@/components/grok-assistant\";\nimport { FolderDocumentList } from \"@/components/folder-document-list\";\nimport { FolderSecurityModal } from \"@/components/folder-security-modal\";\nimport type { Folder } from \"@shared/schema\";\n\nexport default function FolderPage() {\n  const { folderId } = useParams<{ folderId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [isAccessVerified, setIsAccessVerified] = useState(false);\n  const [showSecurityModal, setShowSecurityModal] = useState(false);\n  const [showDocumentCreator, setShowDocumentCreator] = useState(false);\n  const [showGrokAssistant, setShowGrokAssistant] = useState(false);\n\n  // Fetch folder details\n  const { data: folder, isLoading: folderLoading } = useQuery<Folder>({\n    queryKey: [\"/api/folders\", folderId],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n    enabled: !!folderId,\n  });\n\n  // Fetch folder documents\n  const { data: documents = [], isLoading: documentsLoading, refetch: refetchDocuments } = useQuery<Document[]>({\n    queryKey: [\"/api/folders\", folderId, \"documents\"],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n    enabled: !!folderId && isAccessVerified,\n  });\n\n  // Verify folder access\n  const verifyAccessMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", `/api/folders/${folderId}/verify-access`, {\n        securityCode: code,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      setIsAccessVerified(true);\n      setShowSecurityDialog(false);\n      toast({\n        title: \"Access granted\",\n        description: \"You can now view the folder contents.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Access denied\",\n        description: error.message || \"Invalid security code.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download document mutation\n  const downloadDocumentMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Download failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = response.headers.get(\"content-disposition\")?.split(\"filename=\")[1] || \"document\";\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Download started\",\n        description: \"The document is being downloaded.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message || \"Could not download document.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download PDF mutation\n  const downloadPDFMutation = useMutation({\n    mutationFn: async (documentId: string) => {\n      const response = await fetch(`/api/documents/${documentId}/download/pdf`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"PDF download failed\");\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `document-${documentId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"PDF download started\",\n        description: \"The PDF is being downloaded.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"PDF download failed\",\n        description: error.message || \"Could not download PDF.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check access when folder is loaded\n  useEffect(() => {\n    if (folder) {\n      if (!folder.hasSecurityCode) {\n        setIsAccessVerified(true);\n      } else {\n        setShowSecurityDialog(true);\n      }\n    }\n  }, [folder]);\n\n  // Handle document actions\n  const handleViewDocument = (document: Document) => {\n    downloadDocumentMutation.mutate(document.id);\n  };\n\n  const handleUpdateDocument = (document: Document) => {\n    // Create file input for update\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx\";\n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      try {\n        const response = await fetch(`/api/documents/${document.id}/update`, {\n          method: \"PUT\",\n          body: formData,\n          credentials: \"include\",\n        });\n\n        if (!response.ok) throw new Error(\"Update failed\");\n\n        toast({\n          title: \"Document updated\",\n          description: \"The document has been updated successfully.\",\n        });\n        \n        refetchDocuments();\n      } catch (error: any) {\n        toast({\n          title: \"Update failed\",\n          description: error.message || \"Could not update document.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    input.click();\n  };\n\n  const handleDownloadPDF = (document: Document) => {\n    downloadPDFMutation.mutate(document.id);\n  };\n\n  const filteredDocuments = documents.filter(doc =>\n    doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doc.category.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  if (folderLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-zeolf-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading folder...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!folder) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Folder not found</h1>\n          <p className=\"text-gray-600 mb-4\">The folder you're looking for doesn't exist.</p>\n          <Link href=\"/\">\n            <Button>Back to Dashboard</Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <div className=\"flex items-center gap-3\">\n              {folder.hasSecurityCode ? (\n                <Lock className=\"w-6 h-6 text-yellow-500\" />\n              ) : (\n                <Unlock className=\"w-6 h-6 text-green-500\" />\n              )}\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">{folder.name}</h1>\n                {folder.description && (\n                  <p className=\"text-gray-600\">{folder.description}</p>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          {isAccessVerified && (\n            <div className=\"flex items-center gap-3\">\n              <Button\n                onClick={() => setShowGrokAssistant(true)}\n                variant=\"outline\"\n                className=\"bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:from-purple-600 hover:to-blue-600\"\n              >\n                <Bot className=\"w-4 h-4 mr-2\" />\n                AI Assistant\n              </Button>\n              <Button\n                onClick={() => setShowDocumentCreator(true)}\n                className=\"bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Document\n              </Button>\n            </div>\n          )}\n        </div>\n\n        {isAccessVerified ? (\n          <>\n            {/* Search and View Controls */}\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-documents\"\n                />\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid3X3 className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Documents */}\n            {documentsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"bg-white rounded-lg shadow-sm border p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredDocuments.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <FileText className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                  {searchQuery ? \"No documents found\" : \"No documents yet\"}\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {searchQuery \n                    ? \"Try adjusting your search terms\"\n                    : \"Create your first document to get started\"}\n                </p>\n                {!searchQuery && (\n                  <Button\n                    onClick={() => setShowDocumentCreator(true)}\n                    className=\"bg-zeolf-primary hover:bg-zeolf-primary-dark\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Create Document\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <div className={viewMode === \"grid\" \n                ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\" \n                : \"space-y-3\"\n              }>\n                {filteredDocuments.map((document) => (\n                  <Card \n                    key={document.id}\n                    className=\"hover:shadow-md transition-all duration-200 group\"\n                    data-testid={`document-card-${document.id}`}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-3 flex-1\">\n                          <FileText className=\"w-8 h-8 text-zeolf-primary\" />\n                          <div className=\"flex-1 min-w-0\">\n                            <CardTitle className=\"text-sm font-medium line-clamp-1\">\n                              {document.name}\n                            </CardTitle>\n                            <p className=\"text-xs text-gray-500 mt-1\">\n                              {document.originalName}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {document.category}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-0\">\n                      <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n                        <span>{document.fileType.toUpperCase()}</span>\n                        <span>{new Date(document.createdAt).toLocaleDateString()}</span>\n                      </div>\n                      \n                      {/* Document Action Buttons */}\n                      <div className=\"flex items-center justify-center gap-2\">\n                        {/* View Button (Auto-download for offline edit) */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewDocument(document)}\n                          title=\"View & Download for Offline Edit\"\n                          data-testid={`button-view-${document.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                        {/* Update Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleUpdateDocument(document)}\n                          title=\"Update Document (Same File ID)\"\n                          data-testid={`button-update-${document.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        {/* Download PDF Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDownloadPDF(document)}\n                          title=\"Download PDF Only\"\n                          data-testid={`button-download-pdf-${document.id}`}\n                        >\n                          <Download className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Lock className=\"w-16 h-16 mx-auto text-yellow-500 mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Protected Folder\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              This folder requires a security code to access.\n            </p>\n            <Button onClick={() => setShowSecurityDialog(true)}>\n              Enter Security Code\n            </Button>\n          </div>\n        )}\n\n        {/* Security Code Dialog */}\n        <Dialog open={showSecurityDialog} onOpenChange={setShowSecurityDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Enter Security Code</DialogTitle>\n              <DialogDescription>\n                This folder is protected. Please enter the security code to access its contents.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Input\n                type=\"password\"\n                placeholder=\"Security code\"\n                value={securityCode}\n                onChange={(e) => setSecurityCode(e.target.value)}\n                data-testid=\"input-security-code\"\n              />\n              <div className=\"flex justify-end gap-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowSecurityDialog(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={() => verifyAccessMutation.mutate(securityCode)}\n                  disabled={verifyAccessMutation.isPending || !securityCode}\n                >\n                  {verifyAccessMutation.isPending ? \"Verifying...\" : \"Access Folder\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Document Creator */}\n        {showDocumentCreator && (\n          <DocumentCreator\n            folderId={folderId}\n            onClose={() => setShowDocumentCreator(false)}\n            onSuccess={() => {\n              setShowDocumentCreator(false);\n              refetchDocuments();\n            }}\n          />\n        )}\n\n        {/* Grok Assistant */}\n        {showGrokAssistant && (\n          <GrokAssistant onClose={() => setShowGrokAssistant(false)} />\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18108},"client/src/pages/folder-page.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ArrowLeft, \n  Plus,\n  Lock,\n  Unlock,\n  Bot,\n  Upload\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DocumentCreator } from \"@/components/document-creator\";\nimport { GrokAssistant } from \"@/components/grok-assistant\";\nimport { FolderDocumentList } from \"@/components/folder-document-list\";\nimport { FolderSecurityModal } from \"@/components/folder-security-modal\";\nimport { FileUploader } from \"@/components/file-uploader\";\nimport type { Folder } from \"@shared/schema\";\n\nexport default function FolderPage() {\n  const { folderId } = useParams<{ folderId: string }>();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [isAccessVerified, setIsAccessVerified] = useState(false);\n  const [showSecurityModal, setShowSecurityModal] = useState(false);\n  const [showDocumentCreator, setShowDocumentCreator] = useState(false);\n  const [showGrokAssistant, setShowGrokAssistant] = useState(false);\n  const [showFileUpload, setShowFileUpload] = useState(false);\n\n  // Fetch folder details\n  const { data: folder, isLoading: folderLoading } = useQuery<Folder>({\n    queryKey: [\"/api/folders\", folderId],\n    queryFn: async ({ queryKey }) => {\n      const res = await fetch(queryKey.join(\"/\") as string, {\n        credentials: \"include\",\n      });\n      if (!res.ok) throw new Error(`${res.status}: ${res.statusText}`);\n      return await res.json();\n    },\n    enabled: !!folderId,\n  });\n\n  // Check folder access on mount\n  useEffect(() => {\n    if (folder) {\n      if (!folder.hasSecurityCode) {\n        setIsAccessVerified(true);\n      } else {\n        setShowSecurityModal(true);\n      }\n    }\n  }, [folder]);\n\n  const handleAccessGranted = () => {\n    setIsAccessVerified(true);\n    setShowSecurityModal(false);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Authentication Required</h1>\n          <p className=\"text-gray-600\">Please log in to access folders.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (folderLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!folder) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Folder not found</h1>\n          <p className=\"text-gray-600 mb-4\">The folder you're looking for doesn't exist or you don't have access to it.</p>\n          <Link href=\"/dashboard\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-sm border mb-6 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-dashboard\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"relative\">\n                  {folder.hasSecurityCode ? (\n                    <Lock className=\"w-8 h-8 text-yellow-600\" />\n                  ) : (\n                    <Unlock className=\"w-8 h-8 text-green-600\" />\n                  )}\n                </div>\n                <div>\n                  <h1 className=\"text-2xl font-bold text-zeolf-text-primary\">{folder.name}</h1>\n                  {folder.description && (\n                    <p className=\"text-zeolf-text-secondary\">{folder.description}</p>\n                  )}\n                </div>\n              </div>\n              {folder.hasSecurityCode && (\n                <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-200\">\n                  <Lock className=\"w-3 h-3 mr-1\" />\n                  Protected\n                </Badge>\n              )}\n            </div>\n            \n            {/* Action Buttons */}\n            {isAccessVerified && (\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  onClick={() => setShowGrokAssistant(true)}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-grok-assistant\"\n                >\n                  <Bot className=\"w-4 h-4\" />\n                  AI Assistant\n                </Button>\n                <Button\n                  onClick={() => setShowFileUpload(true)}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-upload-file\"\n                >\n                  <Upload className=\"w-4 h-4\" />\n                  Upload File\n                </Button>\n                <Button\n                  onClick={() => setShowDocumentCreator(true)}\n                  className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                  data-testid=\"button-create-document\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Document\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          {/* Folder Stats */}\n          <div className=\"flex items-center gap-6 mt-4 pt-4 border-t text-sm text-gray-500\">\n            <span>Created {new Date(folder.createdAt).toLocaleDateString()}</span>\n            <span>•</span>\n            <span>Last updated {new Date(folder.updatedAt).toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        {isAccessVerified ? (\n          <div className=\"space-y-6\">\n            {/* Document List */}\n            <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <div>\n                  <h2 className=\"text-xl font-semibold text-zeolf-text-primary\">Documents</h2>\n                  <p className=\"text-zeolf-text-secondary\">\n                    Manage documents in this folder\n                  </p>\n                </div>\n              </div>\n              \n              <FolderDocumentList folderId={folderId!} />\n            </div>\n          </div>\n        ) : (\n          <div className=\"bg-white rounded-lg shadow-sm border p-12 text-center\">\n            <Lock className=\"w-16 h-16 mx-auto text-yellow-600 mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              Folder Access Required\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              This folder is protected. Please enter the security code to access its contents.\n            </p>\n            <Button\n              onClick={() => setShowSecurityModal(true)}\n              className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n              data-testid=\"button-enter-security-code\"\n            >\n              Enter Security Code\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      <FolderSecurityModal\n        open={showSecurityModal}\n        onOpenChange={setShowSecurityModal}\n        folderId={folderId!}\n        folderName={folder.name}\n        onAccessGranted={handleAccessGranted}\n      />\n\n      <DocumentCreator\n        open={showDocumentCreator}\n        onClose={() => setShowDocumentCreator(false)}\n        folderId={folderId}\n        onSuccess={() => {\n          setShowDocumentCreator(false);\n          toast({\n            title: \"Document created\",\n            description: \"Your document has been created successfully\",\n          });\n        }}\n      />\n\n      <FileUploader\n        open={showFileUpload}\n        onClose={() => setShowFileUpload(false)}\n        folderId={folderId!}\n        onSuccess={() => {\n          setShowFileUpload(false);\n          toast({\n            title: \"File uploaded\",\n            description: \"Your file has been uploaded successfully\",\n          });\n        }}\n      />\n\n      <GrokAssistant\n        open={showGrokAssistant}\n        onClose={() => setShowGrokAssistant(false)}\n      />\n    </div>\n  );\n}","size_bytes":9059},"client/src/pages/not-found.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { AlertCircle, Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-zeolf-bg\">\n      <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <AlertCircle className=\"h-16 w-16 text-zeolf-error\" />\n          </div>\n          <CardTitle className=\"text-3xl font-bold text-zeolf-text-primary\">404</CardTitle>\n          <p className=\"text-zeolf-text-secondary\">Page Not Found</p>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <p className=\"text-zeolf-text-secondary\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n          <div className=\"space-y-2\">\n            <Link href=\"/\">\n              <Button className=\"w-full bg-zeolf-blue hover:bg-zeolf-blue-dark\" data-testid=\"button-home\">\n                <Home className=\"w-4 h-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1338},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/activity-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, Download, Upload, Share, Eye, Users, FileText, AlertCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { ActivityLog } from \"@shared/schema\";\nimport { formatDistance } from \"date-fns\";\n\nconst actionIcons = {\n  login: { icon: Users, color: \"text-zeolf-blue\", bgColor: \"bg-zeolf-blue/10\" },\n  logout: { icon: Users, color: \"text-gray-600\", bgColor: \"bg-gray-100\" },\n  upload: { icon: Upload, color: \"text-zeolf-success\", bgColor: \"bg-zeolf-success/10\" },\n  download: { icon: Download, color: \"text-zeolf-blue\", bgColor: \"bg-zeolf-blue/10\" },\n  view: { icon: Eye, color: \"text-zeolf-accent\", bgColor: \"bg-zeolf-accent/10\" },\n  share: { icon: Share, color: \"text-zeolf-warning\", bgColor: \"bg-zeolf-warning/10\" },\n  edit: { icon: FileText, color: \"text-zeolf-warning\", bgColor: \"bg-zeolf-warning/10\" },\n  create_user: { icon: Users, color: \"text-zeolf-success\", bgColor: \"bg-zeolf-success/10\" },\n  update_user: { icon: Users, color: \"text-zeolf-warning\", bgColor: \"bg-zeolf-warning/10\" },\n  default: { icon: AlertCircle, color: \"text-gray-600\", bgColor: \"bg-gray-100\" },\n};\n\nconst actionLabels = {\n  login: \"User Login\",\n  logout: \"User Logout\", \n  upload: \"Document Uploaded\",\n  download: \"Document Downloaded\",\n  view: \"Document Viewed\",\n  share: \"Document Shared\",\n  edit: \"Document Edited\",\n  create_user: \"User Created\",\n  update_user: \"User Updated\",\n};\n\nexport default function ActivityLogs() {\n  const { user: currentUser } = useAuth();\n  const [filterAction, setFilterAction] = useState(\"\");\n  const [filterDate, setFilterDate] = useState(\"\");\n  const [limit, setLimit] = useState(\"50\");\n\n  const { data: activityLogs = [], isLoading } = useQuery<ActivityLog[]>({\n    queryKey: [\"/api/admin/activity-logs\", { limit: parseInt(limit) }],\n    enabled: currentUser?.role === \"super_admin\",\n  });\n\n  // Filter logs based on selected filters\n  const filteredLogs = activityLogs.filter(log => {\n    if (filterAction && log.action !== filterAction) return false;\n    if (filterDate && !log.createdAt.startsWith(filterDate)) return false;\n    return true;\n  });\n\n  const getActionConfig = (action: string) => {\n    return actionIcons[action as keyof typeof actionIcons] || actionIcons.default;\n  };\n\n  const getActionLabel = (action: string) => {\n    return actionLabels[action as keyof typeof actionLabels] || action.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const formatLogDescription = (log: ActivityLog) => {\n    const details = log.details as any;\n    \n    switch (log.action) {\n      case 'login':\n        return `User logged into the system`;\n      case 'logout':\n        return `User logged out of the system`;\n      case 'upload':\n        return `Uploaded \"${details?.documentName || 'document'}\" (${details?.fileSize ? (details.fileSize / 1024 / 1024).toFixed(2) + ' MB' : 'unknown size'})`;\n      case 'download':\n        return `Downloaded \"${details?.documentName || 'document'}\" (${details?.fileSize ? (details.fileSize / 1024 / 1024).toFixed(2) + ' MB' : 'unknown size'})`;\n      case 'view':\n        return `Viewed ${details?.documentName ? `\"${details.documentName}\"` : 'document'}`;\n      case 'share':\n        return `Shared \"${details?.documentName || 'document'}\" with ${details?.sharedWith ? 'user' : 'team'}`;\n      case 'create_user':\n        return `Created new user \"${details?.newUserName || 'user'}\" with role ${details?.newUserRole || 'user'}`;\n      case 'update_user':\n        return `Updated user permissions`;\n      default:\n        return `Performed ${log.action.replace(/_/g, ' ')} action`;\n    }\n  };\n\n  if (currentUser?.role !== \"super_admin\") {\n    return (\n      <div className=\"min-h-screen bg-zeolf-bg flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-xl font-semibold text-zeolf-text mb-2\">Access Denied</h2>\n            <p className=\"text-zeolf-text-secondary mb-4\">\n              Super admin access is required to view this page.\n            </p>\n            <Link href=\"/\">\n              <Button className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\">\n                Back to Dashboard\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-zeolf-bg\" data-testid=\"activity-logs\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <h1 className=\"text-xl font-semibold text-zeolf-text\">Activity Logs</h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Select value={filterAction} onValueChange={setFilterAction}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-filter-action\">\n                <SelectValue placeholder=\"All Activities\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">All Activities</SelectItem>\n                <SelectItem value=\"login\">Login</SelectItem>\n                <SelectItem value=\"logout\">Logout</SelectItem>\n                <SelectItem value=\"upload\">Upload</SelectItem>\n                <SelectItem value=\"download\">Download</SelectItem>\n                <SelectItem value=\"view\">View</SelectItem>\n                <SelectItem value=\"share\">Share</SelectItem>\n                <SelectItem value=\"edit\">Edit</SelectItem>\n                <SelectItem value=\"create_user\">User Creation</SelectItem>\n                <SelectItem value=\"update_user\">User Update</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Input\n              type=\"date\"\n              value={filterDate}\n              onChange={(e) => setFilterDate(e.target.value)}\n              className=\"w-40\"\n              data-testid=\"input-filter-date\"\n            />\n            \n            <Select value={limit} onValueChange={setLimit}>\n              <SelectTrigger className=\"w-24\" data-testid=\"select-limit\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"25\">25</SelectItem>\n                <SelectItem value=\"50\">50</SelectItem>\n                <SelectItem value=\"100\">100</SelectItem>\n                <SelectItem value=\"200\">200</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n\n      {/* Activity Timeline */}\n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>System Activity</CardTitle>\n            <p className=\"text-sm text-zeolf-text-secondary\">\n              Showing {filteredLogs.length} of {activityLogs.length} activities\n            </p>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 10 }).map((_, i) => (\n                  <div key={i} className=\"flex items-start space-x-4 p-4 border border-gray-200 rounded-lg\">\n                    <Skeleton className=\"w-10 h-10 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-3 w-full mb-2\" />\n                      <Skeleton className=\"h-3 w-1/2\" />\n                    </div>\n                    <Skeleton className=\"h-3 w-20\" />\n                  </div>\n                ))}\n              </div>\n            ) : filteredLogs.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <AlertCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-zeolf-text mb-2\">No activity found</h3>\n                <p className=\"text-zeolf-text-secondary\">\n                  {filterAction || filterDate \n                    ? \"Try adjusting your filters to see more activities\"\n                    : \"System activities will appear here as users interact with the platform\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredLogs.map((log) => {\n                  const actionConfig = getActionConfig(log.action);\n                  const Icon = actionConfig.icon;\n                  \n                  return (\n                    <div \n                      key={log.id} \n                      className=\"flex items-start space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                      data-testid={`activity-log-${log.id}`}\n                    >\n                      <div className={`w-10 h-10 ${actionConfig.bgColor} rounded-full flex items-center justify-center flex-shrink-0`}>\n                        <Icon className={`w-5 h-5 ${actionConfig.color}`} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h3 className=\"font-medium text-zeolf-text\">\n                            {getActionLabel(log.action)}\n                          </h3>\n                          <span className=\"text-sm text-zeolf-text-secondary flex-shrink-0\">\n                            {formatDistance(new Date(log.createdAt), new Date(), { addSuffix: true })}\n                          </span>\n                        </div>\n                        \n                        <p className=\"text-zeolf-text-secondary text-sm mb-3\">\n                          {formatLogDescription(log)}\n                        </p>\n                        \n                        <div className=\"flex items-center flex-wrap gap-3 text-xs text-zeolf-text-secondary\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            User ID: {log.userId.substr(0, 8)}\n                          </Badge>\n                          \n                          {log.ipAddress && (\n                            <span>IP: {log.ipAddress}</span>\n                          )}\n                          \n                          {log.resourceType && (\n                            <span>Resource: {log.resourceType}</span>\n                          )}\n                          \n                          {log.resourceId && (\n                            <span>ID: {log.resourceId.substr(0, 8)}...</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11546},"client/src/pages/admin/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { ArrowLeft, Plus, Edit, UserCheck, UserX, Copy, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { User } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDistance } from \"date-fns\";\n\nexport default function UserManagement() {\n  const { user: currentUser, registerMutation } = useAuth();\n  const [showAddUserModal, setShowAddUserModal] = useState(false);\n  const [newUserName, setNewUserName] = useState(\"\");\n  const [newUserRole, setNewUserRole] = useState(\"user\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    enabled: currentUser?.role === \"super_admin\",\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ userId, updates }: { userId: string; updates: Partial<User> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, updates);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User updated\",\n        description: \"User status has been updated successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newUserName.trim()) return;\n\n    registerMutation.mutate(\n      { name: newUserName.trim(), role: newUserRole },\n      {\n        onSuccess: () => {\n          setNewUserName(\"\");\n          setNewUserRole(\"user\");\n          setShowAddUserModal(false);\n        },\n      }\n    );\n  };\n\n  const handleToggleUserStatus = (userId: string, currentStatus: boolean) => {\n    updateUserMutation.mutate({\n      userId,\n      updates: { isActive: !currentStatus },\n    });\n  };\n\n  const handleCopyLoginCode = (loginCode: string) => {\n    navigator.clipboard.writeText(loginCode);\n    toast({\n      title: \"Login code copied\",\n      description: \"Login code has been copied to clipboard\",\n    });\n  };\n\n  if (currentUser?.role !== \"super_admin\") {\n    return (\n      <div className=\"min-h-screen bg-zeolf-bg flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <h2 className=\"text-xl font-semibold text-zeolf-text mb-2\">Access Denied</h2>\n            <p className=\"text-zeolf-text-secondary mb-4\">\n              Super admin access is required to view this page.\n            </p>\n            <Link href=\"/\">\n              <Button className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\">\n                Back to Dashboard\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-zeolf-bg\" data-testid=\"user-management\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <h1 className=\"text-xl font-semibold text-zeolf-text\">User Management</h1>\n          </div>\n          \n          <Dialog open={showAddUserModal} onOpenChange={setShowAddUserModal}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                data-testid=\"button-add-user\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Generate Login Code\n              </Button>\n            </DialogTrigger>\n            <DialogContent data-testid=\"add-user-modal\">\n              <DialogHeader>\n                <DialogTitle>Create New User</DialogTitle>\n                <DialogDescription>\n                  Generate a unique login code for a new user account with assigned role permissions.\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleAddUser} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"newUserName\">Full Name</Label>\n                  <Input\n                    id=\"newUserName\"\n                    value={newUserName}\n                    onChange={(e) => setNewUserName(e.target.value)}\n                    placeholder=\"John Doe\"\n                    required\n                    data-testid=\"input-user-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"newUserRole\">Role</Label>\n                  <Select value={newUserRole} onValueChange={setNewUserRole}>\n                    <SelectTrigger data-testid=\"select-user-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"user\">User</SelectItem>\n                      <SelectItem value=\"super_admin\">Super Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex justify-end space-x-3\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowAddUserModal(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\"\n                    className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                    disabled={!newUserName.trim() || registerMutation.isPending}\n                    data-testid=\"button-create-user\"\n                  >\n                    {registerMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Creating...\n                      </>\n                    ) : (\n                      \"Create User\"\n                    )}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Users Table */}\n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>System Users</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"w-10 h-10 rounded-full\" />\n                    <div className=\"flex-1\">\n                      <Skeleton className=\"h-4 w-32 mb-2\" />\n                      <Skeleton className=\"h-3 w-20\" />\n                    </div>\n                    <Skeleton className=\"h-6 w-20\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Login Code</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Last Active</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users.map((user) => (\n                    <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 bg-zeolf-blue rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-medium text-sm\">\n                              {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                            </span>\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-zeolf-text\">{user.name}</div>\n                            <div className=\"text-sm text-zeolf-text-secondary capitalize\">\n                              {user.role.replace('_', ' ')}\n                            </div>\n                          </div>\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                            {user.loginCode}\n                          </code>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleCopyLoginCode(user.loginCode)}\n                            data-testid={`button-copy-${user.id}`}\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                      \n                      <TableCell>\n                        <Badge \n                          variant={user.isActive ? \"default\" : \"secondary\"}\n                          className={user.isActive ? \"bg-zeolf-success\" : \"\"}\n                        >\n                          {user.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      \n                      <TableCell className=\"text-sm text-zeolf-text-secondary\">\n                        {user.lastActive \n                          ? formatDistance(new Date(user.lastActive), new Date(), { addSuffix: true })\n                          : \"Never\"\n                        }\n                      </TableCell>\n                      \n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleToggleUserStatus(user.id, user.isActive)}\n                            disabled={updateUserMutation.isPending || user.id === currentUser?.id}\n                            data-testid={`button-toggle-${user.id}`}\n                          >\n                            {user.isActive ? (\n                              <>\n                                <UserX className=\"w-3 h-3 mr-1\" />\n                                Deactivate\n                              </>\n                            ) : (\n                              <>\n                                <UserCheck className=\"w-3 h-3 mr-1\" />\n                                Activate\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n\n            {users.length === 0 && !isLoading && (\n              <div className=\"text-center py-8\">\n                <h3 className=\"text-lg font-medium text-zeolf-text mb-2\">No users found</h3>\n                <p className=\"text-zeolf-text-secondary mb-4\">\n                  Create the first user account to get started.\n                </p>\n                <Button \n                  onClick={() => setShowAddUserModal(true)}\n                  className=\"bg-zeolf-blue hover:bg-zeolf-blue-dark\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add User\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13002}},"version":1}